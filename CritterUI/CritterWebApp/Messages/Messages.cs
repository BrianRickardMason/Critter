// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Critter.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Messages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Header, global::Critter.Messages.Header.Builder> internal__static_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Payload__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Payload, global::Critter.Messages.Payload.Builder> internal__static_Payload__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Envelope__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Envelope, global::Critter.Messages.Envelope.Builder> internal__static_Envelope__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_Election_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_Election_Req, global::Critter.Messages.Command_Election_Req.Builder> internal__static_Command_Election_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_Election_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_Election_Res, global::Critter.Messages.Command_Election_Res.Builder> internal__static_Command_Election_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_ExecuteGraph_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteGraph_Req, global::Critter.Messages.Command_ExecuteGraph_Req.Builder> internal__static_Command_ExecuteGraph_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_ExecuteGraph_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteGraph_Res, global::Critter.Messages.Command_ExecuteGraph_Res.Builder> internal__static_Command_ExecuteGraph_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DetermineGraphCycle_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineGraphCycle_Req, global::Critter.Messages.Command_DetermineGraphCycle_Req.Builder> internal__static_Command_DetermineGraphCycle_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DetermineGraphCycle_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineGraphCycle_Res, global::Critter.Messages.Command_DetermineGraphCycle_Res.Builder> internal__static_Command_DetermineGraphCycle_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_OrderWorkExecution_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_OrderWorkExecution_Req, global::Critter.Messages.Command_OrderWorkExecution_Req.Builder> internal__static_Command_OrderWorkExecution_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_OrderWorkExecution_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_OrderWorkExecution_Res, global::Critter.Messages.Command_OrderWorkExecution_Res.Builder> internal__static_Command_OrderWorkExecution_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_ExecuteWork_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteWork_Req, global::Critter.Messages.Command_ExecuteWork_Req.Builder> internal__static_Command_ExecuteWork_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_ExecuteWork_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteWork_Res, global::Critter.Messages.Command_ExecuteWork_Res.Builder> internal__static_Command_ExecuteWork_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DetermineWorkCycle_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineWorkCycle_Req, global::Critter.Messages.Command_DetermineWorkCycle_Req.Builder> internal__static_Command_DetermineWorkCycle_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DetermineWorkCycle_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineWorkCycle_Res, global::Critter.Messages.Command_DetermineWorkCycle_Res.Builder> internal__static_Command_DetermineWorkCycle_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_Graph__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Graph, global::Critter.Messages.Data_Graph.Builder> internal__static_Data_Graph__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_GraphDetails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_GraphDetails, global::Critter.Messages.Data_GraphDetails.Builder> internal__static_Data_GraphDetails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_Work__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Work, global::Critter.Messages.Data_Work.Builder> internal__static_Data_Work__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_WorkDetails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_WorkDetails, global::Critter.Messages.Data_WorkDetails.Builder> internal__static_Data_WorkDetails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_WorkPredecessor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_WorkPredecessor, global::Critter.Messages.Data_WorkPredecessor.Builder> internal__static_Data_WorkPredecessor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadGraphAndWork_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphAndWork_Req, global::Critter.Messages.Command_LoadGraphAndWork_Req.Builder> internal__static_Command_LoadGraphAndWork_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadGraphAndWork_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphAndWork_Res, global::Critter.Messages.Command_LoadGraphAndWork_Res.Builder> internal__static_Command_LoadGraphAndWork_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadGraphDetails_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphDetails_Req, global::Critter.Messages.Command_LoadGraphDetails_Req.Builder> internal__static_Command_LoadGraphDetails_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadGraphDetails_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphDetails_Res, global::Critter.Messages.Command_LoadGraphDetails_Res.Builder> internal__static_Command_LoadGraphDetails_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadWorkDetails_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadWorkDetails_Req, global::Critter.Messages.Command_LoadWorkDetails_Req.Builder> internal__static_Command_LoadWorkDetails_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_LoadWorkDetails_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadWorkDetails_Res, global::Critter.Messages.Command_LoadWorkDetails_Res.Builder> internal__static_Command_LoadWorkDetails_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Data_Rite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Rite, global::Critter.Messages.Data_Rite.Builder> internal__static_Data_Rite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Announcement_Heartbeat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Announcement_Heartbeat, global::Critter.Messages.Announcement_Heartbeat.Builder> internal__static_Announcement_Heartbeat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_PresentYourself_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_PresentYourself_Req, global::Critter.Messages.Command_PresentYourself_Req.Builder> internal__static_Command_PresentYourself_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_PresentYourself_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_PresentYourself_Res, global::Critter.Messages.Command_PresentYourself_Res.Builder> internal__static_Command_PresentYourself_Res__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Announcement_Poke__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Announcement_Poke, global::Critter.Messages.Announcement_Poke.Builder> internal__static_Announcement_Poke__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DescribeCrittwork_Req__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DescribeCrittwork_Req, global::Critter.Messages.Command_DescribeCrittwork_Req.Builder> internal__static_Command_DescribeCrittwork_Req__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Command_DescribeCrittwork_Res__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DescribeCrittwork_Res, global::Critter.Messages.Command_DescribeCrittwork_Res.Builder> internal__static_Command_DescribeCrittwork_Res__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Messages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5NZXNzYWdlcy5wcm90byIUCgZIZWFkZXISCgoCaWQYASABKA0iGgoHUGF5" + 
          "bG9hZBIPCgdwYXlsb2FkGAEgASgMIj4KCEVudmVsb3BlEhcKBmhlYWRlchgB" + 
          "IAEoCzIHLkhlYWRlchIZCgdwYXlsb2FkGAIgASgLMgguUGF5bG9hZCJRChRD" + 
          "b21tYW5kX0VsZWN0aW9uX1JlcRITCgttZXNzYWdlTmFtZRgBIAEoCRIRCglj" + 
          "cml0dGhhc2gYAiABKAkSEQoJY3JpdHRuaWNrGAMgASgJIlEKFENvbW1hbmRf" + 
          "RWxlY3Rpb25fUmVzEhMKC21lc3NhZ2VOYW1lGAEgASgJEhEKCWNyaXR0aGFz" + 
          "aBgCIAEoCRIRCgljcml0dG5pY2sYAyABKAkiYwoYQ29tbWFuZF9FeGVjdXRl" + 
          "R3JhcGhfUmVxEhMKC21lc3NhZ2VOYW1lGAEgASgJEh8KF2dyYXBoRXhlY3V0" + 
          "aW9uQ3JpdHRoYXNoGAIgASgJEhEKCWdyYXBoTmFtZRgDIAEoCSJQChhDb21t" + 
          "YW5kX0V4ZWN1dGVHcmFwaF9SZXMSEwoLbWVzc2FnZU5hbWUYASABKAkSHwoX" + 
          "Z3JhcGhFeGVjdXRpb25Dcml0dGhhc2gYAiABKAkiagofQ29tbWFuZF9EZXRl" + 
          "cm1pbmVHcmFwaEN5Y2xlX1JlcRITCgttZXNzYWdlTmFtZRgBIAEoCRIfChdn" + 
          "cmFwaEV4ZWN1dGlvbkNyaXR0aGFzaBgCIAEoCRIRCglncmFwaE5hbWUYAyAB" + 
          "KAkifgofQ29tbWFuZF9EZXRlcm1pbmVHcmFwaEN5Y2xlX1JlcxITCgttZXNz" + 
          "YWdlTmFtZRgBIAEoCRIfChdncmFwaEV4ZWN1dGlvbkNyaXR0aGFzaBgCIAEo" + 
          "CRIRCglncmFwaE5hbWUYAyABKAkSEgoKZ3JhcGhDeWNsZRgEIAEoDSKvAQoe" + 
          "Q29tbWFuZF9PcmRlcldvcmtFeGVjdXRpb25fUmVxEhMKC21lc3NhZ2VOYW1l" + 
          "GAEgASgJEh8KF2dyYXBoRXhlY3V0aW9uQ3JpdHRoYXNoGAIgASgJEhEKCWdy" + 
          "YXBoTmFtZRgDIAEoCRISCgpncmFwaEN5Y2xlGAQgASgNEh4KFndvcmtFeGVj" + 
          "dXRpb25Dcml0dGhhc2gYBSABKAkSEAoId29ya05hbWUYBiABKAkirwEKHkNv" + 
          "bW1hbmRfT3JkZXJXb3JrRXhlY3V0aW9uX1JlcxITCgttZXNzYWdlTmFtZRgB" + 
          "IAEoCRIfChdncmFwaEV4ZWN1dGlvbkNyaXR0aGFzaBgCIAEoCRIRCglncmFw" + 
          "aE5hbWUYAyABKAkSEgoKZ3JhcGhDeWNsZRgEIAEoDRIeChZ3b3JrRXhlY3V0" + 
          "aW9uQ3JpdHRoYXNoGAUgASgJEhAKCHdvcmtOYW1lGAYgASgJIsMBChdDb21t" + 
          "YW5kX0V4ZWN1dGVXb3JrX1JlcRITCgttZXNzYWdlTmFtZRgBIAEoCRIZChFy" + 
          "ZWNlaXZlckNyaXR0bmljaxgCIAEoCRIfChdncmFwaEV4ZWN1dGlvbkNyaXR0" + 
          "aGFzaBgDIAEoCRIRCglncmFwaE5hbWUYBCABKAkSEgoKZ3JhcGhDeWNsZRgF" + 
          "IAEoDRIeChZ3b3JrRXhlY3V0aW9uQ3JpdHRoYXNoGAYgASgJEhAKCHdvcmtO" + 
          "YW1lGAcgASgJIqgBChdDb21tYW5kX0V4ZWN1dGVXb3JrX1JlcxITCgttZXNz" + 
          "YWdlTmFtZRgBIAEoCRIfChdncmFwaEV4ZWN1dGlvbkNyaXR0aGFzaBgCIAEo" + 
          "CRIRCglncmFwaE5hbWUYAyABKAkSEgoKZ3JhcGhDeWNsZRgEIAEoDRIeChZ3" + 
          "b3JrRXhlY3V0aW9uQ3JpdHRoYXNoGAUgASgJEhAKCHdvcmtOYW1lGAYgASgJ" + 
          "Iq8BCh5Db21tYW5kX0RldGVybWluZVdvcmtDeWNsZV9SZXESEwoLbWVzc2Fn" + 
          "ZU5hbWUYASABKAkSHwoXZ3JhcGhFeGVjdXRpb25Dcml0dGhhc2gYAiABKAkS" + 
          "EQoJZ3JhcGhOYW1lGAMgASgJEhIKCmdyYXBoQ3ljbGUYBCABKA0SHgoWd29y" + 
          "a0V4ZWN1dGlvbkNyaXR0aGFzaBgFIAEoCRIQCgh3b3JrTmFtZRgGIAEoCSLC" + 
          "AQoeQ29tbWFuZF9EZXRlcm1pbmVXb3JrQ3ljbGVfUmVzEhMKC21lc3NhZ2VO" + 
          "YW1lGAEgASgJEh8KF2dyYXBoRXhlY3V0aW9uQ3JpdHRoYXNoGAIgASgJEhEK" + 
          "CWdyYXBoTmFtZRgDIAEoCRISCgpncmFwaEN5Y2xlGAQgASgNEh4KFndvcmtF" + 
          "eGVjdXRpb25Dcml0dGhhc2gYBSABKAkSEAoId29ya05hbWUYBiABKAkSEQoJ" + 
          "d29ya0N5Y2xlGAcgASgNIh8KCkRhdGFfR3JhcGgSEQoJZ3JhcGhOYW1lGAEg" + 
          "ASgJIlAKEURhdGFfR3JhcGhEZXRhaWxzEhEKCWdyYXBoTmFtZRgBIAEoCRIT" + 
          "Cgtzb2Z0VGltZW91dBgCIAEoDRITCgtoYXJkVGltZW91dBgDIAEoDSIwCglE" + 
          "YXRhX1dvcmsSEQoJZ3JhcGhOYW1lGAEgASgJEhAKCHdvcmtOYW1lGAIgASgJ" + 
          "Il0KEERhdGFfV29ya0RldGFpbHMSEAoId29ya05hbWUYASABKAkSEwoLc29m" + 
          "dFRpbWVvdXQYAiABKA0SEwoLaGFyZFRpbWVvdXQYAyABKA0SDQoFZHVtbXkY" + 
          "BCABKA0iRQoURGF0YV9Xb3JrUHJlZGVjZXNzb3ISEAoId29ya05hbWUYASAB" + 
          "KAkSGwoTcHJlZGVjZXNzb3JXb3JrTmFtZRgCIAEoCSJwChxDb21tYW5kX0xv" + 
          "YWRHcmFwaEFuZFdvcmtfUmVxEhMKC21lc3NhZ2VOYW1lGAEgASgJEhMKC3Nv" + 
          "ZnRUaW1lb3V0GAIgASgNEhMKC2hhcmRUaW1lb3V0GAMgASgNEhEKCWNyaXR0" + 
          "aGFzaBgEIAEoCSKvAQocQ29tbWFuZF9Mb2FkR3JhcGhBbmRXb3JrX1JlcxIT" + 
          "CgttZXNzYWdlTmFtZRgBIAEoCRIRCgljcml0dGhhc2gYAiABKAkSGwoGZ3Jh" + 
          "cGhzGAMgAygLMgsuRGF0YV9HcmFwaBIZCgV3b3JrcxgEIAMoCzIKLkRhdGFf" + 
          "V29yaxIvChB3b3JrUHJlZGVjZXNzb3JzGAUgAygLMhUuRGF0YV9Xb3JrUHJl" + 
          "ZGVjZXNzb3IicAocQ29tbWFuZF9Mb2FkR3JhcGhEZXRhaWxzX1JlcRITCgtt" + 
          "ZXNzYWdlTmFtZRgBIAEoCRITCgtzb2Z0VGltZW91dBgCIAEoDRITCgtoYXJk" + 
          "VGltZW91dBgDIAEoDRIRCgljcml0dGhhc2gYBCABKAkicAocQ29tbWFuZF9M" + 
          "b2FkR3JhcGhEZXRhaWxzX1JlcxITCgttZXNzYWdlTmFtZRgBIAEoCRIRCglj" + 
          "cml0dGhhc2gYAiABKAkSKAoMZ3JhcGhEZXRhaWxzGAMgAygLMhIuRGF0YV9H" + 
          "cmFwaERldGFpbHMibwobQ29tbWFuZF9Mb2FkV29ya0RldGFpbHNfUmVxEhMK" + 
          "C21lc3NhZ2VOYW1lGAEgASgJEhMKC3NvZnRUaW1lb3V0GAIgASgNEhMKC2hh" + 
          "cmRUaW1lb3V0GAMgASgNEhEKCWNyaXR0aGFzaBgEIAEoCSJtChtDb21tYW5k" + 
          "X0xvYWRXb3JrRGV0YWlsc19SZXMSEwoLbWVzc2FnZU5hbWUYASABKAkSEQoJ" + 
          "Y3JpdHRoYXNoGAIgASgJEiYKC3dvcmtEZXRhaWxzGAMgAygLMhEuRGF0YV9X" + 
          "b3JrRGV0YWlscyIdCglEYXRhX1JpdGUSEAoIcml0ZU5hbWUYASABKAkiUwoW" + 
          "QW5ub3VuY2VtZW50X0hlYXJ0YmVhdBITCgttZXNzYWdlTmFtZRgBIAEoCRIR" + 
          "Cgljcml0dG5pY2sYAiABKAkSEQoJdGltZXN0YW1wGAMgASgBIoIBChtDb21t" + 
          "YW5kX1ByZXNlbnRZb3Vyc2VsZl9SZXESEwoLbWVzc2FnZU5hbWUYASABKAkS" + 
          "EwoLc29mdFRpbWVvdXQYAiABKA0SEwoLaGFyZFRpbWVvdXQYAyABKA0SEQoJ" + 
          "Y3JpdHRoYXNoGAQgASgJEhEKCWNyaXR0bmljaxgFIAEoCSJzChtDb21tYW5k" + 
          "X1ByZXNlbnRZb3Vyc2VsZl9SZXMSEwoLbWVzc2FnZU5hbWUYASABKAkSEQoJ" + 
          "Y3JpdHRoYXNoGAIgASgJEhEKCWNyaXR0bmljaxgDIAEoCRIZCgVyaXRlcxgE" + 
          "IAMoCzIKLkRhdGFfUml0ZSI7ChFBbm5vdW5jZW1lbnRfUG9rZRITCgttZXNz" + 
          "YWdlTmFtZRgBIAEoCRIRCgljcml0dG5pY2sYAiABKAkiRwodQ29tbWFuZF9E" + 
          "ZXNjcmliZUNyaXR0d29ya19SZXESEwoLbWVzc2FnZU5hbWUYASABKAkSEQoJ" + 
          "Y3JpdHRoYXNoGAIgASgJIlYKHUNvbW1hbmRfRGVzY3JpYmVDcml0dHdvcmtf" + 
          "UmVzEhMKC21lc3NhZ2VOYW1lGAEgASgJEhEKCWNyaXR0aGFzaBgCIAEoCRIN" + 
          "CgVkdW1teRgDIAEoCQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Header, global::Critter.Messages.Header.Builder>(internal__static_Header__Descriptor,
                new string[] { "Id", });
        internal__static_Payload__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Payload__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Payload, global::Critter.Messages.Payload.Builder>(internal__static_Payload__Descriptor,
                new string[] { "Payload_", });
        internal__static_Envelope__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Envelope__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Envelope, global::Critter.Messages.Envelope.Builder>(internal__static_Envelope__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Command_Election_Req__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Command_Election_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_Election_Req, global::Critter.Messages.Command_Election_Req.Builder>(internal__static_Command_Election_Req__Descriptor,
                new string[] { "MessageName", "Critthash", "Crittnick", });
        internal__static_Command_Election_Res__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Command_Election_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_Election_Res, global::Critter.Messages.Command_Election_Res.Builder>(internal__static_Command_Election_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "Crittnick", });
        internal__static_Command_ExecuteGraph_Req__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Command_ExecuteGraph_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteGraph_Req, global::Critter.Messages.Command_ExecuteGraph_Req.Builder>(internal__static_Command_ExecuteGraph_Req__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", });
        internal__static_Command_ExecuteGraph_Res__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Command_ExecuteGraph_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteGraph_Res, global::Critter.Messages.Command_ExecuteGraph_Res.Builder>(internal__static_Command_ExecuteGraph_Res__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", });
        internal__static_Command_DetermineGraphCycle_Req__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Command_DetermineGraphCycle_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineGraphCycle_Req, global::Critter.Messages.Command_DetermineGraphCycle_Req.Builder>(internal__static_Command_DetermineGraphCycle_Req__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", });
        internal__static_Command_DetermineGraphCycle_Res__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Command_DetermineGraphCycle_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineGraphCycle_Res, global::Critter.Messages.Command_DetermineGraphCycle_Res.Builder>(internal__static_Command_DetermineGraphCycle_Res__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", });
        internal__static_Command_OrderWorkExecution_Req__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Command_OrderWorkExecution_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_OrderWorkExecution_Req, global::Critter.Messages.Command_OrderWorkExecution_Req.Builder>(internal__static_Command_OrderWorkExecution_Req__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", });
        internal__static_Command_OrderWorkExecution_Res__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Command_OrderWorkExecution_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_OrderWorkExecution_Res, global::Critter.Messages.Command_OrderWorkExecution_Res.Builder>(internal__static_Command_OrderWorkExecution_Res__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", });
        internal__static_Command_ExecuteWork_Req__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Command_ExecuteWork_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteWork_Req, global::Critter.Messages.Command_ExecuteWork_Req.Builder>(internal__static_Command_ExecuteWork_Req__Descriptor,
                new string[] { "MessageName", "ReceiverCrittnick", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", });
        internal__static_Command_ExecuteWork_Res__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Command_ExecuteWork_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_ExecuteWork_Res, global::Critter.Messages.Command_ExecuteWork_Res.Builder>(internal__static_Command_ExecuteWork_Res__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", });
        internal__static_Command_DetermineWorkCycle_Req__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Command_DetermineWorkCycle_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineWorkCycle_Req, global::Critter.Messages.Command_DetermineWorkCycle_Req.Builder>(internal__static_Command_DetermineWorkCycle_Req__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", });
        internal__static_Command_DetermineWorkCycle_Res__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Command_DetermineWorkCycle_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DetermineWorkCycle_Res, global::Critter.Messages.Command_DetermineWorkCycle_Res.Builder>(internal__static_Command_DetermineWorkCycle_Res__Descriptor,
                new string[] { "MessageName", "GraphExecutionCritthash", "GraphName", "GraphCycle", "WorkExecutionCritthash", "WorkName", "WorkCycle", });
        internal__static_Data_Graph__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Data_Graph__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Graph, global::Critter.Messages.Data_Graph.Builder>(internal__static_Data_Graph__Descriptor,
                new string[] { "GraphName", });
        internal__static_Data_GraphDetails__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Data_GraphDetails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_GraphDetails, global::Critter.Messages.Data_GraphDetails.Builder>(internal__static_Data_GraphDetails__Descriptor,
                new string[] { "GraphName", "SoftTimeout", "HardTimeout", });
        internal__static_Data_Work__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Data_Work__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Work, global::Critter.Messages.Data_Work.Builder>(internal__static_Data_Work__Descriptor,
                new string[] { "GraphName", "WorkName", });
        internal__static_Data_WorkDetails__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Data_WorkDetails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_WorkDetails, global::Critter.Messages.Data_WorkDetails.Builder>(internal__static_Data_WorkDetails__Descriptor,
                new string[] { "WorkName", "SoftTimeout", "HardTimeout", "Dummy", });
        internal__static_Data_WorkPredecessor__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Data_WorkPredecessor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_WorkPredecessor, global::Critter.Messages.Data_WorkPredecessor.Builder>(internal__static_Data_WorkPredecessor__Descriptor,
                new string[] { "WorkName", "PredecessorWorkName", });
        internal__static_Command_LoadGraphAndWork_Req__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Command_LoadGraphAndWork_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphAndWork_Req, global::Critter.Messages.Command_LoadGraphAndWork_Req.Builder>(internal__static_Command_LoadGraphAndWork_Req__Descriptor,
                new string[] { "MessageName", "SoftTimeout", "HardTimeout", "Critthash", });
        internal__static_Command_LoadGraphAndWork_Res__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Command_LoadGraphAndWork_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphAndWork_Res, global::Critter.Messages.Command_LoadGraphAndWork_Res.Builder>(internal__static_Command_LoadGraphAndWork_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "Graphs", "Works", "WorkPredecessors", });
        internal__static_Command_LoadGraphDetails_Req__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Command_LoadGraphDetails_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphDetails_Req, global::Critter.Messages.Command_LoadGraphDetails_Req.Builder>(internal__static_Command_LoadGraphDetails_Req__Descriptor,
                new string[] { "MessageName", "SoftTimeout", "HardTimeout", "Critthash", });
        internal__static_Command_LoadGraphDetails_Res__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Command_LoadGraphDetails_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadGraphDetails_Res, global::Critter.Messages.Command_LoadGraphDetails_Res.Builder>(internal__static_Command_LoadGraphDetails_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "GraphDetails", });
        internal__static_Command_LoadWorkDetails_Req__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Command_LoadWorkDetails_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadWorkDetails_Req, global::Critter.Messages.Command_LoadWorkDetails_Req.Builder>(internal__static_Command_LoadWorkDetails_Req__Descriptor,
                new string[] { "MessageName", "SoftTimeout", "HardTimeout", "Critthash", });
        internal__static_Command_LoadWorkDetails_Res__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Command_LoadWorkDetails_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_LoadWorkDetails_Res, global::Critter.Messages.Command_LoadWorkDetails_Res.Builder>(internal__static_Command_LoadWorkDetails_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "WorkDetails", });
        internal__static_Data_Rite__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Data_Rite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Data_Rite, global::Critter.Messages.Data_Rite.Builder>(internal__static_Data_Rite__Descriptor,
                new string[] { "RiteName", });
        internal__static_Announcement_Heartbeat__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Announcement_Heartbeat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Announcement_Heartbeat, global::Critter.Messages.Announcement_Heartbeat.Builder>(internal__static_Announcement_Heartbeat__Descriptor,
                new string[] { "MessageName", "Crittnick", "Timestamp", });
        internal__static_Command_PresentYourself_Req__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Command_PresentYourself_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_PresentYourself_Req, global::Critter.Messages.Command_PresentYourself_Req.Builder>(internal__static_Command_PresentYourself_Req__Descriptor,
                new string[] { "MessageName", "SoftTimeout", "HardTimeout", "Critthash", "Crittnick", });
        internal__static_Command_PresentYourself_Res__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Command_PresentYourself_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_PresentYourself_Res, global::Critter.Messages.Command_PresentYourself_Res.Builder>(internal__static_Command_PresentYourself_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "Crittnick", "Rites", });
        internal__static_Announcement_Poke__Descriptor = Descriptor.MessageTypes[30];
        internal__static_Announcement_Poke__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Announcement_Poke, global::Critter.Messages.Announcement_Poke.Builder>(internal__static_Announcement_Poke__Descriptor,
                new string[] { "MessageName", "Crittnick", });
        internal__static_Command_DescribeCrittwork_Req__Descriptor = Descriptor.MessageTypes[31];
        internal__static_Command_DescribeCrittwork_Req__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DescribeCrittwork_Req, global::Critter.Messages.Command_DescribeCrittwork_Req.Builder>(internal__static_Command_DescribeCrittwork_Req__Descriptor,
                new string[] { "MessageName", "Critthash", });
        internal__static_Command_DescribeCrittwork_Res__Descriptor = Descriptor.MessageTypes[32];
        internal__static_Command_DescribeCrittwork_Res__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Critter.Messages.Command_DescribeCrittwork_Res, global::Critter.Messages.Command_DescribeCrittwork_Res.Builder>(internal__static_Command_DescribeCrittwork_Res__Descriptor,
                new string[] { "MessageName", "Critthash", "Dummy", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "id" };
    private static readonly uint[] _headerFieldTags = new uint[] { 8 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Header__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _headerFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::Critter.Messages.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::Critter.Messages.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Payload : pb::GeneratedMessage<Payload, Payload.Builder> {
    private Payload() { }
    private static readonly Payload defaultInstance = new Payload().MakeReadOnly();
    private static readonly string[] _payloadFieldNames = new string[] { "payload" };
    private static readonly uint[] _payloadFieldTags = new uint[] { 10 };
    public static Payload DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Payload DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Payload ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Payload__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Payload, Payload.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Payload__FieldAccessorTable; }
    }
    
    public const int Payload_FieldNumber = 1;
    private bool hasPayload_;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload_ {
      get { return hasPayload_; }
    }
    public pb::ByteString Payload_ {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _payloadFieldNames;
      if (hasPayload_) {
        output.WriteBytes(1, field_names[0], Payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPayload_) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Payload_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Payload ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Payload ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Payload ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Payload ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Payload ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Payload ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Payload ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Payload ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Payload ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Payload ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Payload MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Payload prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Payload, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Payload cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Payload result;
      
      private Payload PrepareBuilder() {
        if (resultIsReadOnly) {
          Payload original = result;
          result = new Payload();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Payload MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Payload.Descriptor; }
      }
      
      public override Payload DefaultInstanceForType {
        get { return global::Critter.Messages.Payload.DefaultInstance; }
      }
      
      public override Payload BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Payload) {
          return MergeFrom((Payload) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Payload other) {
        if (other == global::Critter.Messages.Payload.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPayload_) {
          Payload_ = other.Payload_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_payloadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _payloadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPayload_ = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPayload_ {
        get { return result.hasPayload_; }
      }
      public pb::ByteString Payload_ {
        get { return result.Payload_; }
        set { SetPayload_(value); }
      }
      public Builder SetPayload_(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload_ = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload_() {
        PrepareBuilder();
        result.hasPayload_ = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Payload() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Envelope : pb::GeneratedMessage<Envelope, Envelope.Builder> {
    private Envelope() { }
    private static readonly Envelope defaultInstance = new Envelope().MakeReadOnly();
    private static readonly string[] _envelopeFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _envelopeFieldTags = new uint[] { 10, 18 };
    public static Envelope DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Envelope DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Envelope ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Envelope__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Envelope, Envelope.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Envelope__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Critter.Messages.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Critter.Messages.Header Header {
      get { return header_ ?? global::Critter.Messages.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private bool hasPayload;
    private global::Critter.Messages.Payload payload_;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public global::Critter.Messages.Payload Payload {
      get { return payload_ ?? global::Critter.Messages.Payload.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _envelopeFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (hasPayload) {
        output.WriteMessage(2, field_names[1], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        if (hasPayload) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Payload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Envelope ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Envelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Envelope ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Envelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Envelope ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Envelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Envelope ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Envelope ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Envelope ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Envelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Envelope MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Envelope prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Envelope, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Envelope cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Envelope result;
      
      private Envelope PrepareBuilder() {
        if (resultIsReadOnly) {
          Envelope original = result;
          result = new Envelope();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Envelope MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Envelope.Descriptor; }
      }
      
      public override Envelope DefaultInstanceForType {
        get { return global::Critter.Messages.Envelope.DefaultInstance; }
      }
      
      public override Envelope BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Envelope) {
          return MergeFrom((Envelope) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Envelope other) {
        if (other == global::Critter.Messages.Envelope.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasPayload) {
          MergePayload(other.Payload);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_envelopeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _envelopeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Critter.Messages.Header.Builder subBuilder = global::Critter.Messages.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Critter.Messages.Payload.Builder subBuilder = global::Critter.Messages.Payload.CreateBuilder();
              if (result.hasPayload) {
                subBuilder.MergeFrom(Payload);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Payload = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Critter.Messages.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Critter.Messages.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Critter.Messages.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Critter.Messages.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Critter.Messages.Header.DefaultInstance) {
            result.header_ = global::Critter.Messages.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasPayload {
       get { return result.hasPayload; }
      }
      public global::Critter.Messages.Payload Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(global::Critter.Messages.Payload value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder SetPayload(global::Critter.Messages.Payload.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = builderForValue.Build();
        return this;
      }
      public Builder MergePayload(global::Critter.Messages.Payload value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPayload &&
            result.payload_ != global::Critter.Messages.Payload.DefaultInstance) {
            result.payload_ = global::Critter.Messages.Payload.CreateBuilder(result.payload_).MergeFrom(value).BuildPartial();
        } else {
          result.payload_ = value;
        }
        result.hasPayload = true;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = null;
        return this;
      }
    }
    static Envelope() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_Election_Req : pb::GeneratedMessage<Command_Election_Req, Command_Election_Req.Builder> {
    private Command_Election_Req() { }
    private static readonly Command_Election_Req defaultInstance = new Command_Election_Req().MakeReadOnly();
    private static readonly string[] _commandElectionReqFieldNames = new string[] { "critthash", "crittnick", "messageName" };
    private static readonly uint[] _commandElectionReqFieldTags = new uint[] { 18, 26, 10 };
    public static Command_Election_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_Election_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_Election_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_Election_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_Election_Req, Command_Election_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_Election_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int CrittnickFieldNumber = 3;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandElectionReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (hasCrittnick) {
        output.WriteString(3, field_names[1], Crittnick);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Crittnick);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_Election_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_Election_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_Election_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_Election_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_Election_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_Election_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_Election_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_Election_Req result;
      
      private Command_Election_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_Election_Req original = result;
          result = new Command_Election_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_Election_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_Election_Req.Descriptor; }
      }
      
      public override Command_Election_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_Election_Req.DefaultInstance; }
      }
      
      public override Command_Election_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_Election_Req) {
          return MergeFrom((Command_Election_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_Election_Req other) {
        if (other == global::Critter.Messages.Command_Election_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandElectionReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandElectionReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
    }
    static Command_Election_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_Election_Res : pb::GeneratedMessage<Command_Election_Res, Command_Election_Res.Builder> {
    private Command_Election_Res() { }
    private static readonly Command_Election_Res defaultInstance = new Command_Election_Res().MakeReadOnly();
    private static readonly string[] _commandElectionResFieldNames = new string[] { "critthash", "crittnick", "messageName" };
    private static readonly uint[] _commandElectionResFieldTags = new uint[] { 18, 26, 10 };
    public static Command_Election_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_Election_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_Election_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_Election_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_Election_Res, Command_Election_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_Election_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int CrittnickFieldNumber = 3;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandElectionResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (hasCrittnick) {
        output.WriteString(3, field_names[1], Crittnick);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Crittnick);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_Election_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_Election_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_Election_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_Election_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_Election_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_Election_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_Election_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_Election_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_Election_Res result;
      
      private Command_Election_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_Election_Res original = result;
          result = new Command_Election_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_Election_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_Election_Res.Descriptor; }
      }
      
      public override Command_Election_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_Election_Res.DefaultInstance; }
      }
      
      public override Command_Election_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_Election_Res) {
          return MergeFrom((Command_Election_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_Election_Res other) {
        if (other == global::Critter.Messages.Command_Election_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandElectionResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandElectionResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
    }
    static Command_Election_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_ExecuteGraph_Req : pb::GeneratedMessage<Command_ExecuteGraph_Req, Command_ExecuteGraph_Req.Builder> {
    private Command_ExecuteGraph_Req() { }
    private static readonly Command_ExecuteGraph_Req defaultInstance = new Command_ExecuteGraph_Req().MakeReadOnly();
    private static readonly string[] _commandExecuteGraphReqFieldNames = new string[] { "graphExecutionCritthash", "graphName", "messageName" };
    private static readonly uint[] _commandExecuteGraphReqFieldTags = new uint[] { 18, 26, 10 };
    public static Command_ExecuteGraph_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_ExecuteGraph_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_ExecuteGraph_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteGraph_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_ExecuteGraph_Req, Command_ExecuteGraph_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteGraph_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandExecuteGraphReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[0], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[1], GraphName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_ExecuteGraph_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteGraph_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_ExecuteGraph_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_ExecuteGraph_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_ExecuteGraph_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_ExecuteGraph_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_ExecuteGraph_Req result;
      
      private Command_ExecuteGraph_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_ExecuteGraph_Req original = result;
          result = new Command_ExecuteGraph_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_ExecuteGraph_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_ExecuteGraph_Req.Descriptor; }
      }
      
      public override Command_ExecuteGraph_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_ExecuteGraph_Req.DefaultInstance; }
      }
      
      public override Command_ExecuteGraph_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_ExecuteGraph_Req) {
          return MergeFrom((Command_ExecuteGraph_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_ExecuteGraph_Req other) {
        if (other == global::Critter.Messages.Command_ExecuteGraph_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandExecuteGraphReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandExecuteGraphReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
    }
    static Command_ExecuteGraph_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_ExecuteGraph_Res : pb::GeneratedMessage<Command_ExecuteGraph_Res, Command_ExecuteGraph_Res.Builder> {
    private Command_ExecuteGraph_Res() { }
    private static readonly Command_ExecuteGraph_Res defaultInstance = new Command_ExecuteGraph_Res().MakeReadOnly();
    private static readonly string[] _commandExecuteGraphResFieldNames = new string[] { "graphExecutionCritthash", "messageName" };
    private static readonly uint[] _commandExecuteGraphResFieldTags = new uint[] { 18, 10 };
    public static Command_ExecuteGraph_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_ExecuteGraph_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_ExecuteGraph_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteGraph_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_ExecuteGraph_Res, Command_ExecuteGraph_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteGraph_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandExecuteGraphResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[1], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[0], GraphExecutionCritthash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_ExecuteGraph_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteGraph_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_ExecuteGraph_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_ExecuteGraph_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_ExecuteGraph_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_ExecuteGraph_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_ExecuteGraph_Res result;
      
      private Command_ExecuteGraph_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_ExecuteGraph_Res original = result;
          result = new Command_ExecuteGraph_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_ExecuteGraph_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_ExecuteGraph_Res.Descriptor; }
      }
      
      public override Command_ExecuteGraph_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_ExecuteGraph_Res.DefaultInstance; }
      }
      
      public override Command_ExecuteGraph_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_ExecuteGraph_Res) {
          return MergeFrom((Command_ExecuteGraph_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_ExecuteGraph_Res other) {
        if (other == global::Critter.Messages.Command_ExecuteGraph_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandExecuteGraphResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandExecuteGraphResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
    }
    static Command_ExecuteGraph_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DetermineGraphCycle_Req : pb::GeneratedMessage<Command_DetermineGraphCycle_Req, Command_DetermineGraphCycle_Req.Builder> {
    private Command_DetermineGraphCycle_Req() { }
    private static readonly Command_DetermineGraphCycle_Req defaultInstance = new Command_DetermineGraphCycle_Req().MakeReadOnly();
    private static readonly string[] _commandDetermineGraphCycleReqFieldNames = new string[] { "graphExecutionCritthash", "graphName", "messageName" };
    private static readonly uint[] _commandDetermineGraphCycleReqFieldTags = new uint[] { 18, 26, 10 };
    public static Command_DetermineGraphCycle_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DetermineGraphCycle_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DetermineGraphCycle_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineGraphCycle_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DetermineGraphCycle_Req, Command_DetermineGraphCycle_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineGraphCycle_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDetermineGraphCycleReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[0], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[1], GraphName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DetermineGraphCycle_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DetermineGraphCycle_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DetermineGraphCycle_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DetermineGraphCycle_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DetermineGraphCycle_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DetermineGraphCycle_Req result;
      
      private Command_DetermineGraphCycle_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DetermineGraphCycle_Req original = result;
          result = new Command_DetermineGraphCycle_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DetermineGraphCycle_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DetermineGraphCycle_Req.Descriptor; }
      }
      
      public override Command_DetermineGraphCycle_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DetermineGraphCycle_Req.DefaultInstance; }
      }
      
      public override Command_DetermineGraphCycle_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DetermineGraphCycle_Req) {
          return MergeFrom((Command_DetermineGraphCycle_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DetermineGraphCycle_Req other) {
        if (other == global::Critter.Messages.Command_DetermineGraphCycle_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDetermineGraphCycleReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDetermineGraphCycleReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
    }
    static Command_DetermineGraphCycle_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DetermineGraphCycle_Res : pb::GeneratedMessage<Command_DetermineGraphCycle_Res, Command_DetermineGraphCycle_Res.Builder> {
    private Command_DetermineGraphCycle_Res() { }
    private static readonly Command_DetermineGraphCycle_Res defaultInstance = new Command_DetermineGraphCycle_Res().MakeReadOnly();
    private static readonly string[] _commandDetermineGraphCycleResFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName" };
    private static readonly uint[] _commandDetermineGraphCycleResFieldTags = new uint[] { 32, 18, 26, 10 };
    public static Command_DetermineGraphCycle_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DetermineGraphCycle_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DetermineGraphCycle_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineGraphCycle_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DetermineGraphCycle_Res, Command_DetermineGraphCycle_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineGraphCycle_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDetermineGraphCycleResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DetermineGraphCycle_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineGraphCycle_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DetermineGraphCycle_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DetermineGraphCycle_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DetermineGraphCycle_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DetermineGraphCycle_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DetermineGraphCycle_Res result;
      
      private Command_DetermineGraphCycle_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DetermineGraphCycle_Res original = result;
          result = new Command_DetermineGraphCycle_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DetermineGraphCycle_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DetermineGraphCycle_Res.Descriptor; }
      }
      
      public override Command_DetermineGraphCycle_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DetermineGraphCycle_Res.DefaultInstance; }
      }
      
      public override Command_DetermineGraphCycle_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DetermineGraphCycle_Res) {
          return MergeFrom((Command_DetermineGraphCycle_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DetermineGraphCycle_Res other) {
        if (other == global::Critter.Messages.Command_DetermineGraphCycle_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDetermineGraphCycleResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDetermineGraphCycleResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
    }
    static Command_DetermineGraphCycle_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_OrderWorkExecution_Req : pb::GeneratedMessage<Command_OrderWorkExecution_Req, Command_OrderWorkExecution_Req.Builder> {
    private Command_OrderWorkExecution_Req() { }
    private static readonly Command_OrderWorkExecution_Req defaultInstance = new Command_OrderWorkExecution_Req().MakeReadOnly();
    private static readonly string[] _commandOrderWorkExecutionReqFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandOrderWorkExecutionReqFieldTags = new uint[] { 32, 18, 26, 10, 42, 50 };
    public static Command_OrderWorkExecution_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_OrderWorkExecution_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_OrderWorkExecution_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_OrderWorkExecution_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_OrderWorkExecution_Req, Command_OrderWorkExecution_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_OrderWorkExecution_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 5;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 6;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandOrderWorkExecutionReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(5, field_names[4], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(6, field_names[5], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(5, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_OrderWorkExecution_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_OrderWorkExecution_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_OrderWorkExecution_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_OrderWorkExecution_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_OrderWorkExecution_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_OrderWorkExecution_Req result;
      
      private Command_OrderWorkExecution_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_OrderWorkExecution_Req original = result;
          result = new Command_OrderWorkExecution_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_OrderWorkExecution_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_OrderWorkExecution_Req.Descriptor; }
      }
      
      public override Command_OrderWorkExecution_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_OrderWorkExecution_Req.DefaultInstance; }
      }
      
      public override Command_OrderWorkExecution_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_OrderWorkExecution_Req) {
          return MergeFrom((Command_OrderWorkExecution_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_OrderWorkExecution_Req other) {
        if (other == global::Critter.Messages.Command_OrderWorkExecution_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandOrderWorkExecutionReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandOrderWorkExecutionReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 42: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 50: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Command_OrderWorkExecution_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_OrderWorkExecution_Res : pb::GeneratedMessage<Command_OrderWorkExecution_Res, Command_OrderWorkExecution_Res.Builder> {
    private Command_OrderWorkExecution_Res() { }
    private static readonly Command_OrderWorkExecution_Res defaultInstance = new Command_OrderWorkExecution_Res().MakeReadOnly();
    private static readonly string[] _commandOrderWorkExecutionResFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandOrderWorkExecutionResFieldTags = new uint[] { 32, 18, 26, 10, 42, 50 };
    public static Command_OrderWorkExecution_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_OrderWorkExecution_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_OrderWorkExecution_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_OrderWorkExecution_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_OrderWorkExecution_Res, Command_OrderWorkExecution_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_OrderWorkExecution_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 5;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 6;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandOrderWorkExecutionResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(5, field_names[4], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(6, field_names[5], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(5, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_OrderWorkExecution_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_OrderWorkExecution_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_OrderWorkExecution_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_OrderWorkExecution_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_OrderWorkExecution_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_OrderWorkExecution_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_OrderWorkExecution_Res result;
      
      private Command_OrderWorkExecution_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_OrderWorkExecution_Res original = result;
          result = new Command_OrderWorkExecution_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_OrderWorkExecution_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_OrderWorkExecution_Res.Descriptor; }
      }
      
      public override Command_OrderWorkExecution_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_OrderWorkExecution_Res.DefaultInstance; }
      }
      
      public override Command_OrderWorkExecution_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_OrderWorkExecution_Res) {
          return MergeFrom((Command_OrderWorkExecution_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_OrderWorkExecution_Res other) {
        if (other == global::Critter.Messages.Command_OrderWorkExecution_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandOrderWorkExecutionResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandOrderWorkExecutionResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 42: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 50: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Command_OrderWorkExecution_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_ExecuteWork_Req : pb::GeneratedMessage<Command_ExecuteWork_Req, Command_ExecuteWork_Req.Builder> {
    private Command_ExecuteWork_Req() { }
    private static readonly Command_ExecuteWork_Req defaultInstance = new Command_ExecuteWork_Req().MakeReadOnly();
    private static readonly string[] _commandExecuteWorkReqFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "receiverCrittnick", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandExecuteWorkReqFieldTags = new uint[] { 40, 26, 34, 10, 18, 50, 58 };
    public static Command_ExecuteWork_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_ExecuteWork_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_ExecuteWork_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteWork_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_ExecuteWork_Req, Command_ExecuteWork_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteWork_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int ReceiverCrittnickFieldNumber = 2;
    private bool hasReceiverCrittnick;
    private string receiverCrittnick_ = "";
    public bool HasReceiverCrittnick {
      get { return hasReceiverCrittnick; }
    }
    public string ReceiverCrittnick {
      get { return receiverCrittnick_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 3;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 4;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 5;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 6;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 7;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandExecuteWorkReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasReceiverCrittnick) {
        output.WriteString(2, field_names[4], ReceiverCrittnick);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(3, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(4, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(5, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(6, field_names[5], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(7, field_names[6], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasReceiverCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ReceiverCrittnick);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_ExecuteWork_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteWork_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_ExecuteWork_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_ExecuteWork_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_ExecuteWork_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_ExecuteWork_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_ExecuteWork_Req result;
      
      private Command_ExecuteWork_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_ExecuteWork_Req original = result;
          result = new Command_ExecuteWork_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_ExecuteWork_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_ExecuteWork_Req.Descriptor; }
      }
      
      public override Command_ExecuteWork_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_ExecuteWork_Req.DefaultInstance; }
      }
      
      public override Command_ExecuteWork_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_ExecuteWork_Req) {
          return MergeFrom((Command_ExecuteWork_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_ExecuteWork_Req other) {
        if (other == global::Critter.Messages.Command_ExecuteWork_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasReceiverCrittnick) {
          ReceiverCrittnick = other.ReceiverCrittnick;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandExecuteWorkReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandExecuteWorkReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasReceiverCrittnick = input.ReadString(ref result.receiverCrittnick_);
              break;
            }
            case 26: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 34: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 40: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 50: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 58: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasReceiverCrittnick {
        get { return result.hasReceiverCrittnick; }
      }
      public string ReceiverCrittnick {
        get { return result.ReceiverCrittnick; }
        set { SetReceiverCrittnick(value); }
      }
      public Builder SetReceiverCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiverCrittnick = true;
        result.receiverCrittnick_ = value;
        return this;
      }
      public Builder ClearReceiverCrittnick() {
        PrepareBuilder();
        result.hasReceiverCrittnick = false;
        result.receiverCrittnick_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Command_ExecuteWork_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_ExecuteWork_Res : pb::GeneratedMessage<Command_ExecuteWork_Res, Command_ExecuteWork_Res.Builder> {
    private Command_ExecuteWork_Res() { }
    private static readonly Command_ExecuteWork_Res defaultInstance = new Command_ExecuteWork_Res().MakeReadOnly();
    private static readonly string[] _commandExecuteWorkResFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandExecuteWorkResFieldTags = new uint[] { 32, 18, 26, 10, 42, 50 };
    public static Command_ExecuteWork_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_ExecuteWork_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_ExecuteWork_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteWork_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_ExecuteWork_Res, Command_ExecuteWork_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_ExecuteWork_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 5;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 6;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandExecuteWorkResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(5, field_names[4], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(6, field_names[5], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(5, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_ExecuteWork_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_ExecuteWork_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_ExecuteWork_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_ExecuteWork_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_ExecuteWork_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_ExecuteWork_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_ExecuteWork_Res result;
      
      private Command_ExecuteWork_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_ExecuteWork_Res original = result;
          result = new Command_ExecuteWork_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_ExecuteWork_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_ExecuteWork_Res.Descriptor; }
      }
      
      public override Command_ExecuteWork_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_ExecuteWork_Res.DefaultInstance; }
      }
      
      public override Command_ExecuteWork_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_ExecuteWork_Res) {
          return MergeFrom((Command_ExecuteWork_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_ExecuteWork_Res other) {
        if (other == global::Critter.Messages.Command_ExecuteWork_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandExecuteWorkResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandExecuteWorkResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 42: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 50: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Command_ExecuteWork_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DetermineWorkCycle_Req : pb::GeneratedMessage<Command_DetermineWorkCycle_Req, Command_DetermineWorkCycle_Req.Builder> {
    private Command_DetermineWorkCycle_Req() { }
    private static readonly Command_DetermineWorkCycle_Req defaultInstance = new Command_DetermineWorkCycle_Req().MakeReadOnly();
    private static readonly string[] _commandDetermineWorkCycleReqFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandDetermineWorkCycleReqFieldTags = new uint[] { 32, 18, 26, 10, 42, 50 };
    public static Command_DetermineWorkCycle_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DetermineWorkCycle_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DetermineWorkCycle_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineWorkCycle_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DetermineWorkCycle_Req, Command_DetermineWorkCycle_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineWorkCycle_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 5;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 6;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDetermineWorkCycleReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(5, field_names[4], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(6, field_names[5], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(5, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DetermineWorkCycle_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DetermineWorkCycle_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DetermineWorkCycle_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DetermineWorkCycle_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DetermineWorkCycle_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DetermineWorkCycle_Req result;
      
      private Command_DetermineWorkCycle_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DetermineWorkCycle_Req original = result;
          result = new Command_DetermineWorkCycle_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DetermineWorkCycle_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DetermineWorkCycle_Req.Descriptor; }
      }
      
      public override Command_DetermineWorkCycle_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DetermineWorkCycle_Req.DefaultInstance; }
      }
      
      public override Command_DetermineWorkCycle_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DetermineWorkCycle_Req) {
          return MergeFrom((Command_DetermineWorkCycle_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DetermineWorkCycle_Req other) {
        if (other == global::Critter.Messages.Command_DetermineWorkCycle_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDetermineWorkCycleReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDetermineWorkCycleReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 42: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 50: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Command_DetermineWorkCycle_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DetermineWorkCycle_Res : pb::GeneratedMessage<Command_DetermineWorkCycle_Res, Command_DetermineWorkCycle_Res.Builder> {
    private Command_DetermineWorkCycle_Res() { }
    private static readonly Command_DetermineWorkCycle_Res defaultInstance = new Command_DetermineWorkCycle_Res().MakeReadOnly();
    private static readonly string[] _commandDetermineWorkCycleResFieldNames = new string[] { "graphCycle", "graphExecutionCritthash", "graphName", "messageName", "workCycle", "workExecutionCritthash", "workName" };
    private static readonly uint[] _commandDetermineWorkCycleResFieldTags = new uint[] { 32, 18, 26, 10, 56, 42, 50 };
    public static Command_DetermineWorkCycle_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DetermineWorkCycle_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DetermineWorkCycle_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineWorkCycle_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DetermineWorkCycle_Res, Command_DetermineWorkCycle_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DetermineWorkCycle_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int GraphExecutionCritthashFieldNumber = 2;
    private bool hasGraphExecutionCritthash;
    private string graphExecutionCritthash_ = "";
    public bool HasGraphExecutionCritthash {
      get { return hasGraphExecutionCritthash; }
    }
    public string GraphExecutionCritthash {
      get { return graphExecutionCritthash_; }
    }
    
    public const int GraphNameFieldNumber = 3;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int GraphCycleFieldNumber = 4;
    private bool hasGraphCycle;
    private uint graphCycle_;
    public bool HasGraphCycle {
      get { return hasGraphCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint GraphCycle {
      get { return graphCycle_; }
    }
    
    public const int WorkExecutionCritthashFieldNumber = 5;
    private bool hasWorkExecutionCritthash;
    private string workExecutionCritthash_ = "";
    public bool HasWorkExecutionCritthash {
      get { return hasWorkExecutionCritthash; }
    }
    public string WorkExecutionCritthash {
      get { return workExecutionCritthash_; }
    }
    
    public const int WorkNameFieldNumber = 6;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public const int WorkCycleFieldNumber = 7;
    private bool hasWorkCycle;
    private uint workCycle_;
    public bool HasWorkCycle {
      get { return hasWorkCycle; }
    }
    [global::System.CLSCompliant(false)]
    public uint WorkCycle {
      get { return workCycle_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDetermineWorkCycleResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasGraphExecutionCritthash) {
        output.WriteString(2, field_names[1], GraphExecutionCritthash);
      }
      if (hasGraphName) {
        output.WriteString(3, field_names[2], GraphName);
      }
      if (hasGraphCycle) {
        output.WriteUInt32(4, field_names[0], GraphCycle);
      }
      if (hasWorkExecutionCritthash) {
        output.WriteString(5, field_names[5], WorkExecutionCritthash);
      }
      if (hasWorkName) {
        output.WriteString(6, field_names[6], WorkName);
      }
      if (hasWorkCycle) {
        output.WriteUInt32(7, field_names[4], WorkCycle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasGraphExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GraphExecutionCritthash);
        }
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GraphName);
        }
        if (hasGraphCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GraphCycle);
        }
        if (hasWorkExecutionCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(5, WorkExecutionCritthash);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, WorkName);
        }
        if (hasWorkCycle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, WorkCycle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DetermineWorkCycle_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DetermineWorkCycle_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DetermineWorkCycle_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DetermineWorkCycle_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DetermineWorkCycle_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DetermineWorkCycle_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DetermineWorkCycle_Res result;
      
      private Command_DetermineWorkCycle_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DetermineWorkCycle_Res original = result;
          result = new Command_DetermineWorkCycle_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DetermineWorkCycle_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DetermineWorkCycle_Res.Descriptor; }
      }
      
      public override Command_DetermineWorkCycle_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DetermineWorkCycle_Res.DefaultInstance; }
      }
      
      public override Command_DetermineWorkCycle_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DetermineWorkCycle_Res) {
          return MergeFrom((Command_DetermineWorkCycle_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DetermineWorkCycle_Res other) {
        if (other == global::Critter.Messages.Command_DetermineWorkCycle_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasGraphExecutionCritthash) {
          GraphExecutionCritthash = other.GraphExecutionCritthash;
        }
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasGraphCycle) {
          GraphCycle = other.GraphCycle;
        }
        if (other.HasWorkExecutionCritthash) {
          WorkExecutionCritthash = other.WorkExecutionCritthash;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        if (other.HasWorkCycle) {
          WorkCycle = other.WorkCycle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDetermineWorkCycleResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDetermineWorkCycleResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasGraphExecutionCritthash = input.ReadString(ref result.graphExecutionCritthash_);
              break;
            }
            case 26: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 32: {
              result.hasGraphCycle = input.ReadUInt32(ref result.graphCycle_);
              break;
            }
            case 42: {
              result.hasWorkExecutionCritthash = input.ReadString(ref result.workExecutionCritthash_);
              break;
            }
            case 50: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
            case 56: {
              result.hasWorkCycle = input.ReadUInt32(ref result.workCycle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasGraphExecutionCritthash {
        get { return result.hasGraphExecutionCritthash; }
      }
      public string GraphExecutionCritthash {
        get { return result.GraphExecutionCritthash; }
        set { SetGraphExecutionCritthash(value); }
      }
      public Builder SetGraphExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphExecutionCritthash = true;
        result.graphExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearGraphExecutionCritthash() {
        PrepareBuilder();
        result.hasGraphExecutionCritthash = false;
        result.graphExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasGraphCycle {
        get { return result.hasGraphCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint GraphCycle {
        get { return result.GraphCycle; }
        set { SetGraphCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGraphCycle(uint value) {
        PrepareBuilder();
        result.hasGraphCycle = true;
        result.graphCycle_ = value;
        return this;
      }
      public Builder ClearGraphCycle() {
        PrepareBuilder();
        result.hasGraphCycle = false;
        result.graphCycle_ = 0;
        return this;
      }
      
      public bool HasWorkExecutionCritthash {
        get { return result.hasWorkExecutionCritthash; }
      }
      public string WorkExecutionCritthash {
        get { return result.WorkExecutionCritthash; }
        set { SetWorkExecutionCritthash(value); }
      }
      public Builder SetWorkExecutionCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkExecutionCritthash = true;
        result.workExecutionCritthash_ = value;
        return this;
      }
      public Builder ClearWorkExecutionCritthash() {
        PrepareBuilder();
        result.hasWorkExecutionCritthash = false;
        result.workExecutionCritthash_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
      
      public bool HasWorkCycle {
        get { return result.hasWorkCycle; }
      }
      [global::System.CLSCompliant(false)]
      public uint WorkCycle {
        get { return result.WorkCycle; }
        set { SetWorkCycle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWorkCycle(uint value) {
        PrepareBuilder();
        result.hasWorkCycle = true;
        result.workCycle_ = value;
        return this;
      }
      public Builder ClearWorkCycle() {
        PrepareBuilder();
        result.hasWorkCycle = false;
        result.workCycle_ = 0;
        return this;
      }
    }
    static Command_DetermineWorkCycle_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_Graph : pb::GeneratedMessage<Data_Graph, Data_Graph.Builder> {
    private Data_Graph() { }
    private static readonly Data_Graph defaultInstance = new Data_Graph().MakeReadOnly();
    private static readonly string[] _dataGraphFieldNames = new string[] { "graphName" };
    private static readonly uint[] _dataGraphFieldTags = new uint[] { 10 };
    public static Data_Graph DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_Graph DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_Graph ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_Graph__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_Graph, Data_Graph.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_Graph__FieldAccessorTable; }
    }
    
    public const int GraphNameFieldNumber = 1;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataGraphFieldNames;
      if (hasGraphName) {
        output.WriteString(1, field_names[0], GraphName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GraphName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_Graph ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Graph ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Graph ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Graph ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Graph ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Graph ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_Graph ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_Graph ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_Graph ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Graph ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_Graph MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_Graph prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_Graph, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_Graph cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_Graph result;
      
      private Data_Graph PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_Graph original = result;
          result = new Data_Graph();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_Graph MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_Graph.Descriptor; }
      }
      
      public override Data_Graph DefaultInstanceForType {
        get { return global::Critter.Messages.Data_Graph.DefaultInstance; }
      }
      
      public override Data_Graph BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_Graph) {
          return MergeFrom((Data_Graph) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_Graph other) {
        if (other == global::Critter.Messages.Data_Graph.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataGraphFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataGraphFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
    }
    static Data_Graph() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_GraphDetails : pb::GeneratedMessage<Data_GraphDetails, Data_GraphDetails.Builder> {
    private Data_GraphDetails() { }
    private static readonly Data_GraphDetails defaultInstance = new Data_GraphDetails().MakeReadOnly();
    private static readonly string[] _dataGraphDetailsFieldNames = new string[] { "graphName", "hardTimeout", "softTimeout" };
    private static readonly uint[] _dataGraphDetailsFieldTags = new uint[] { 10, 24, 16 };
    public static Data_GraphDetails DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_GraphDetails DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_GraphDetails ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_GraphDetails__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_GraphDetails, Data_GraphDetails.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_GraphDetails__FieldAccessorTable; }
    }
    
    public const int GraphNameFieldNumber = 1;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataGraphDetailsFieldNames;
      if (hasGraphName) {
        output.WriteString(1, field_names[0], GraphName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[2], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[1], HardTimeout);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GraphName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_GraphDetails ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_GraphDetails ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_GraphDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_GraphDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_GraphDetails MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_GraphDetails prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_GraphDetails, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_GraphDetails cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_GraphDetails result;
      
      private Data_GraphDetails PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_GraphDetails original = result;
          result = new Data_GraphDetails();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_GraphDetails MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_GraphDetails.Descriptor; }
      }
      
      public override Data_GraphDetails DefaultInstanceForType {
        get { return global::Critter.Messages.Data_GraphDetails.DefaultInstance; }
      }
      
      public override Data_GraphDetails BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_GraphDetails) {
          return MergeFrom((Data_GraphDetails) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_GraphDetails other) {
        if (other == global::Critter.Messages.Data_GraphDetails.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataGraphDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataGraphDetailsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
    }
    static Data_GraphDetails() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_Work : pb::GeneratedMessage<Data_Work, Data_Work.Builder> {
    private Data_Work() { }
    private static readonly Data_Work defaultInstance = new Data_Work().MakeReadOnly();
    private static readonly string[] _dataWorkFieldNames = new string[] { "graphName", "workName" };
    private static readonly uint[] _dataWorkFieldTags = new uint[] { 10, 18 };
    public static Data_Work DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_Work DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_Work ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_Work__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_Work, Data_Work.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_Work__FieldAccessorTable; }
    }
    
    public const int GraphNameFieldNumber = 1;
    private bool hasGraphName;
    private string graphName_ = "";
    public bool HasGraphName {
      get { return hasGraphName; }
    }
    public string GraphName {
      get { return graphName_; }
    }
    
    public const int WorkNameFieldNumber = 2;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataWorkFieldNames;
      if (hasGraphName) {
        output.WriteString(1, field_names[0], GraphName);
      }
      if (hasWorkName) {
        output.WriteString(2, field_names[1], WorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGraphName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GraphName);
        }
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, WorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_Work ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Work ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Work ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Work ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Work ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Work ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_Work ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_Work ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_Work ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Work ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_Work MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_Work prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_Work, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_Work cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_Work result;
      
      private Data_Work PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_Work original = result;
          result = new Data_Work();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_Work MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_Work.Descriptor; }
      }
      
      public override Data_Work DefaultInstanceForType {
        get { return global::Critter.Messages.Data_Work.DefaultInstance; }
      }
      
      public override Data_Work BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_Work) {
          return MergeFrom((Data_Work) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_Work other) {
        if (other == global::Critter.Messages.Data_Work.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGraphName) {
          GraphName = other.GraphName;
        }
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataWorkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataWorkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGraphName = input.ReadString(ref result.graphName_);
              break;
            }
            case 18: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGraphName {
        get { return result.hasGraphName; }
      }
      public string GraphName {
        get { return result.GraphName; }
        set { SetGraphName(value); }
      }
      public Builder SetGraphName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGraphName = true;
        result.graphName_ = value;
        return this;
      }
      public Builder ClearGraphName() {
        PrepareBuilder();
        result.hasGraphName = false;
        result.graphName_ = "";
        return this;
      }
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
    }
    static Data_Work() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_WorkDetails : pb::GeneratedMessage<Data_WorkDetails, Data_WorkDetails.Builder> {
    private Data_WorkDetails() { }
    private static readonly Data_WorkDetails defaultInstance = new Data_WorkDetails().MakeReadOnly();
    private static readonly string[] _dataWorkDetailsFieldNames = new string[] { "dummy", "hardTimeout", "softTimeout", "workName" };
    private static readonly uint[] _dataWorkDetailsFieldTags = new uint[] { 32, 24, 16, 10 };
    public static Data_WorkDetails DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_WorkDetails DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_WorkDetails ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_WorkDetails__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_WorkDetails, Data_WorkDetails.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_WorkDetails__FieldAccessorTable; }
    }
    
    public const int WorkNameFieldNumber = 1;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public const int DummyFieldNumber = 4;
    private bool hasDummy;
    private uint dummy_;
    public bool HasDummy {
      get { return hasDummy; }
    }
    [global::System.CLSCompliant(false)]
    public uint Dummy {
      get { return dummy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataWorkDetailsFieldNames;
      if (hasWorkName) {
        output.WriteString(1, field_names[3], WorkName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[2], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[1], HardTimeout);
      }
      if (hasDummy) {
        output.WriteUInt32(4, field_names[0], Dummy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        if (hasDummy) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Dummy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_WorkDetails ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkDetails ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_WorkDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_WorkDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_WorkDetails MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_WorkDetails prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_WorkDetails, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_WorkDetails cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_WorkDetails result;
      
      private Data_WorkDetails PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_WorkDetails original = result;
          result = new Data_WorkDetails();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_WorkDetails MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_WorkDetails.Descriptor; }
      }
      
      public override Data_WorkDetails DefaultInstanceForType {
        get { return global::Critter.Messages.Data_WorkDetails.DefaultInstance; }
      }
      
      public override Data_WorkDetails BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_WorkDetails) {
          return MergeFrom((Data_WorkDetails) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_WorkDetails other) {
        if (other == global::Critter.Messages.Data_WorkDetails.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        if (other.HasDummy) {
          Dummy = other.Dummy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataWorkDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataWorkDetailsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
            case 32: {
              result.hasDummy = input.ReadUInt32(ref result.dummy_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
      
      public bool HasDummy {
        get { return result.hasDummy; }
      }
      [global::System.CLSCompliant(false)]
      public uint Dummy {
        get { return result.Dummy; }
        set { SetDummy(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDummy(uint value) {
        PrepareBuilder();
        result.hasDummy = true;
        result.dummy_ = value;
        return this;
      }
      public Builder ClearDummy() {
        PrepareBuilder();
        result.hasDummy = false;
        result.dummy_ = 0;
        return this;
      }
    }
    static Data_WorkDetails() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_WorkPredecessor : pb::GeneratedMessage<Data_WorkPredecessor, Data_WorkPredecessor.Builder> {
    private Data_WorkPredecessor() { }
    private static readonly Data_WorkPredecessor defaultInstance = new Data_WorkPredecessor().MakeReadOnly();
    private static readonly string[] _dataWorkPredecessorFieldNames = new string[] { "predecessorWorkName", "workName" };
    private static readonly uint[] _dataWorkPredecessorFieldTags = new uint[] { 18, 10 };
    public static Data_WorkPredecessor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_WorkPredecessor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_WorkPredecessor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_WorkPredecessor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_WorkPredecessor, Data_WorkPredecessor.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_WorkPredecessor__FieldAccessorTable; }
    }
    
    public const int WorkNameFieldNumber = 1;
    private bool hasWorkName;
    private string workName_ = "";
    public bool HasWorkName {
      get { return hasWorkName; }
    }
    public string WorkName {
      get { return workName_; }
    }
    
    public const int PredecessorWorkNameFieldNumber = 2;
    private bool hasPredecessorWorkName;
    private string predecessorWorkName_ = "";
    public bool HasPredecessorWorkName {
      get { return hasPredecessorWorkName; }
    }
    public string PredecessorWorkName {
      get { return predecessorWorkName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataWorkPredecessorFieldNames;
      if (hasWorkName) {
        output.WriteString(1, field_names[1], WorkName);
      }
      if (hasPredecessorWorkName) {
        output.WriteString(2, field_names[0], PredecessorWorkName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkName);
        }
        if (hasPredecessorWorkName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PredecessorWorkName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_WorkPredecessor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_WorkPredecessor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_WorkPredecessor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_WorkPredecessor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_WorkPredecessor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_WorkPredecessor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_WorkPredecessor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_WorkPredecessor result;
      
      private Data_WorkPredecessor PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_WorkPredecessor original = result;
          result = new Data_WorkPredecessor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_WorkPredecessor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_WorkPredecessor.Descriptor; }
      }
      
      public override Data_WorkPredecessor DefaultInstanceForType {
        get { return global::Critter.Messages.Data_WorkPredecessor.DefaultInstance; }
      }
      
      public override Data_WorkPredecessor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_WorkPredecessor) {
          return MergeFrom((Data_WorkPredecessor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_WorkPredecessor other) {
        if (other == global::Critter.Messages.Data_WorkPredecessor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkName) {
          WorkName = other.WorkName;
        }
        if (other.HasPredecessorWorkName) {
          PredecessorWorkName = other.PredecessorWorkName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataWorkPredecessorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataWorkPredecessorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkName = input.ReadString(ref result.workName_);
              break;
            }
            case 18: {
              result.hasPredecessorWorkName = input.ReadString(ref result.predecessorWorkName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkName {
        get { return result.hasWorkName; }
      }
      public string WorkName {
        get { return result.WorkName; }
        set { SetWorkName(value); }
      }
      public Builder SetWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkName = true;
        result.workName_ = value;
        return this;
      }
      public Builder ClearWorkName() {
        PrepareBuilder();
        result.hasWorkName = false;
        result.workName_ = "";
        return this;
      }
      
      public bool HasPredecessorWorkName {
        get { return result.hasPredecessorWorkName; }
      }
      public string PredecessorWorkName {
        get { return result.PredecessorWorkName; }
        set { SetPredecessorWorkName(value); }
      }
      public Builder SetPredecessorWorkName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPredecessorWorkName = true;
        result.predecessorWorkName_ = value;
        return this;
      }
      public Builder ClearPredecessorWorkName() {
        PrepareBuilder();
        result.hasPredecessorWorkName = false;
        result.predecessorWorkName_ = "";
        return this;
      }
    }
    static Data_WorkPredecessor() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadGraphAndWork_Req : pb::GeneratedMessage<Command_LoadGraphAndWork_Req, Command_LoadGraphAndWork_Req.Builder> {
    private Command_LoadGraphAndWork_Req() { }
    private static readonly Command_LoadGraphAndWork_Req defaultInstance = new Command_LoadGraphAndWork_Req().MakeReadOnly();
    private static readonly string[] _commandLoadGraphAndWorkReqFieldNames = new string[] { "critthash", "hardTimeout", "messageName", "softTimeout" };
    private static readonly uint[] _commandLoadGraphAndWorkReqFieldTags = new uint[] { 34, 24, 10, 16 };
    public static Command_LoadGraphAndWork_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadGraphAndWork_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadGraphAndWork_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphAndWork_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadGraphAndWork_Req, Command_LoadGraphAndWork_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphAndWork_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public const int CritthashFieldNumber = 4;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadGraphAndWorkReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[3], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[1], HardTimeout);
      }
      if (hasCritthash) {
        output.WriteString(4, field_names[0], Critthash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Critthash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadGraphAndWork_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadGraphAndWork_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadGraphAndWork_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadGraphAndWork_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadGraphAndWork_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadGraphAndWork_Req result;
      
      private Command_LoadGraphAndWork_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadGraphAndWork_Req original = result;
          result = new Command_LoadGraphAndWork_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadGraphAndWork_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadGraphAndWork_Req.Descriptor; }
      }
      
      public override Command_LoadGraphAndWork_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadGraphAndWork_Req.DefaultInstance; }
      }
      
      public override Command_LoadGraphAndWork_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadGraphAndWork_Req) {
          return MergeFrom((Command_LoadGraphAndWork_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadGraphAndWork_Req other) {
        if (other == global::Critter.Messages.Command_LoadGraphAndWork_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadGraphAndWorkReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadGraphAndWorkReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
            case 34: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
    }
    static Command_LoadGraphAndWork_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadGraphAndWork_Res : pb::GeneratedMessage<Command_LoadGraphAndWork_Res, Command_LoadGraphAndWork_Res.Builder> {
    private Command_LoadGraphAndWork_Res() { }
    private static readonly Command_LoadGraphAndWork_Res defaultInstance = new Command_LoadGraphAndWork_Res().MakeReadOnly();
    private static readonly string[] _commandLoadGraphAndWorkResFieldNames = new string[] { "critthash", "graphs", "messageName", "workPredecessors", "works" };
    private static readonly uint[] _commandLoadGraphAndWorkResFieldTags = new uint[] { 18, 26, 10, 42, 34 };
    public static Command_LoadGraphAndWork_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadGraphAndWork_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadGraphAndWork_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphAndWork_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadGraphAndWork_Res, Command_LoadGraphAndWork_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphAndWork_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int GraphsFieldNumber = 3;
    private pbc::PopsicleList<global::Critter.Messages.Data_Graph> graphs_ = new pbc::PopsicleList<global::Critter.Messages.Data_Graph>();
    public scg::IList<global::Critter.Messages.Data_Graph> GraphsList {
      get { return graphs_; }
    }
    public int GraphsCount {
      get { return graphs_.Count; }
    }
    public global::Critter.Messages.Data_Graph GetGraphs(int index) {
      return graphs_[index];
    }
    
    public const int WorksFieldNumber = 4;
    private pbc::PopsicleList<global::Critter.Messages.Data_Work> works_ = new pbc::PopsicleList<global::Critter.Messages.Data_Work>();
    public scg::IList<global::Critter.Messages.Data_Work> WorksList {
      get { return works_; }
    }
    public int WorksCount {
      get { return works_.Count; }
    }
    public global::Critter.Messages.Data_Work GetWorks(int index) {
      return works_[index];
    }
    
    public const int WorkPredecessorsFieldNumber = 5;
    private pbc::PopsicleList<global::Critter.Messages.Data_WorkPredecessor> workPredecessors_ = new pbc::PopsicleList<global::Critter.Messages.Data_WorkPredecessor>();
    public scg::IList<global::Critter.Messages.Data_WorkPredecessor> WorkPredecessorsList {
      get { return workPredecessors_; }
    }
    public int WorkPredecessorsCount {
      get { return workPredecessors_.Count; }
    }
    public global::Critter.Messages.Data_WorkPredecessor GetWorkPredecessors(int index) {
      return workPredecessors_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadGraphAndWorkResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (graphs_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], graphs_);
      }
      if (works_.Count > 0) {
        output.WriteMessageArray(4, field_names[4], works_);
      }
      if (workPredecessors_.Count > 0) {
        output.WriteMessageArray(5, field_names[3], workPredecessors_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        foreach (global::Critter.Messages.Data_Graph element in GraphsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Critter.Messages.Data_Work element in WorksList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Critter.Messages.Data_WorkPredecessor element in WorkPredecessorsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadGraphAndWork_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphAndWork_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadGraphAndWork_Res MakeReadOnly() {
      graphs_.MakeReadOnly();
      works_.MakeReadOnly();
      workPredecessors_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadGraphAndWork_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadGraphAndWork_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadGraphAndWork_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadGraphAndWork_Res result;
      
      private Command_LoadGraphAndWork_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadGraphAndWork_Res original = result;
          result = new Command_LoadGraphAndWork_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadGraphAndWork_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadGraphAndWork_Res.Descriptor; }
      }
      
      public override Command_LoadGraphAndWork_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadGraphAndWork_Res.DefaultInstance; }
      }
      
      public override Command_LoadGraphAndWork_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadGraphAndWork_Res) {
          return MergeFrom((Command_LoadGraphAndWork_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadGraphAndWork_Res other) {
        if (other == global::Critter.Messages.Command_LoadGraphAndWork_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.graphs_.Count != 0) {
          result.graphs_.Add(other.graphs_);
        }
        if (other.works_.Count != 0) {
          result.works_.Add(other.works_);
        }
        if (other.workPredecessors_.Count != 0) {
          result.workPredecessors_.Add(other.workPredecessors_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadGraphAndWorkResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadGraphAndWorkResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.graphs_, global::Critter.Messages.Data_Graph.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.works_, global::Critter.Messages.Data_Work.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.workPredecessors_, global::Critter.Messages.Data_WorkPredecessor.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_Graph> GraphsList {
        get { return PrepareBuilder().graphs_; }
      }
      public int GraphsCount {
        get { return result.GraphsCount; }
      }
      public global::Critter.Messages.Data_Graph GetGraphs(int index) {
        return result.GetGraphs(index);
      }
      public Builder SetGraphs(int index, global::Critter.Messages.Data_Graph value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.graphs_[index] = value;
        return this;
      }
      public Builder SetGraphs(int index, global::Critter.Messages.Data_Graph.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.graphs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGraphs(global::Critter.Messages.Data_Graph value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.graphs_.Add(value);
        return this;
      }
      public Builder AddGraphs(global::Critter.Messages.Data_Graph.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.graphs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGraphs(scg::IEnumerable<global::Critter.Messages.Data_Graph> values) {
        PrepareBuilder();
        result.graphs_.Add(values);
        return this;
      }
      public Builder ClearGraphs() {
        PrepareBuilder();
        result.graphs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_Work> WorksList {
        get { return PrepareBuilder().works_; }
      }
      public int WorksCount {
        get { return result.WorksCount; }
      }
      public global::Critter.Messages.Data_Work GetWorks(int index) {
        return result.GetWorks(index);
      }
      public Builder SetWorks(int index, global::Critter.Messages.Data_Work value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.works_[index] = value;
        return this;
      }
      public Builder SetWorks(int index, global::Critter.Messages.Data_Work.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.works_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorks(global::Critter.Messages.Data_Work value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.works_.Add(value);
        return this;
      }
      public Builder AddWorks(global::Critter.Messages.Data_Work.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.works_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorks(scg::IEnumerable<global::Critter.Messages.Data_Work> values) {
        PrepareBuilder();
        result.works_.Add(values);
        return this;
      }
      public Builder ClearWorks() {
        PrepareBuilder();
        result.works_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_WorkPredecessor> WorkPredecessorsList {
        get { return PrepareBuilder().workPredecessors_; }
      }
      public int WorkPredecessorsCount {
        get { return result.WorkPredecessorsCount; }
      }
      public global::Critter.Messages.Data_WorkPredecessor GetWorkPredecessors(int index) {
        return result.GetWorkPredecessors(index);
      }
      public Builder SetWorkPredecessors(int index, global::Critter.Messages.Data_WorkPredecessor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.workPredecessors_[index] = value;
        return this;
      }
      public Builder SetWorkPredecessors(int index, global::Critter.Messages.Data_WorkPredecessor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.workPredecessors_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorkPredecessors(global::Critter.Messages.Data_WorkPredecessor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.workPredecessors_.Add(value);
        return this;
      }
      public Builder AddWorkPredecessors(global::Critter.Messages.Data_WorkPredecessor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.workPredecessors_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorkPredecessors(scg::IEnumerable<global::Critter.Messages.Data_WorkPredecessor> values) {
        PrepareBuilder();
        result.workPredecessors_.Add(values);
        return this;
      }
      public Builder ClearWorkPredecessors() {
        PrepareBuilder();
        result.workPredecessors_.Clear();
        return this;
      }
    }
    static Command_LoadGraphAndWork_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadGraphDetails_Req : pb::GeneratedMessage<Command_LoadGraphDetails_Req, Command_LoadGraphDetails_Req.Builder> {
    private Command_LoadGraphDetails_Req() { }
    private static readonly Command_LoadGraphDetails_Req defaultInstance = new Command_LoadGraphDetails_Req().MakeReadOnly();
    private static readonly string[] _commandLoadGraphDetailsReqFieldNames = new string[] { "critthash", "hardTimeout", "messageName", "softTimeout" };
    private static readonly uint[] _commandLoadGraphDetailsReqFieldTags = new uint[] { 34, 24, 10, 16 };
    public static Command_LoadGraphDetails_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadGraphDetails_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadGraphDetails_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphDetails_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadGraphDetails_Req, Command_LoadGraphDetails_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphDetails_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public const int CritthashFieldNumber = 4;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadGraphDetailsReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[3], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[1], HardTimeout);
      }
      if (hasCritthash) {
        output.WriteString(4, field_names[0], Critthash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Critthash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadGraphDetails_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadGraphDetails_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadGraphDetails_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadGraphDetails_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadGraphDetails_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadGraphDetails_Req result;
      
      private Command_LoadGraphDetails_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadGraphDetails_Req original = result;
          result = new Command_LoadGraphDetails_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadGraphDetails_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadGraphDetails_Req.Descriptor; }
      }
      
      public override Command_LoadGraphDetails_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadGraphDetails_Req.DefaultInstance; }
      }
      
      public override Command_LoadGraphDetails_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadGraphDetails_Req) {
          return MergeFrom((Command_LoadGraphDetails_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadGraphDetails_Req other) {
        if (other == global::Critter.Messages.Command_LoadGraphDetails_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadGraphDetailsReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadGraphDetailsReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
            case 34: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
    }
    static Command_LoadGraphDetails_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadGraphDetails_Res : pb::GeneratedMessage<Command_LoadGraphDetails_Res, Command_LoadGraphDetails_Res.Builder> {
    private Command_LoadGraphDetails_Res() { }
    private static readonly Command_LoadGraphDetails_Res defaultInstance = new Command_LoadGraphDetails_Res().MakeReadOnly();
    private static readonly string[] _commandLoadGraphDetailsResFieldNames = new string[] { "critthash", "graphDetails", "messageName" };
    private static readonly uint[] _commandLoadGraphDetailsResFieldTags = new uint[] { 18, 26, 10 };
    public static Command_LoadGraphDetails_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadGraphDetails_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadGraphDetails_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphDetails_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadGraphDetails_Res, Command_LoadGraphDetails_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadGraphDetails_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int GraphDetailsFieldNumber = 3;
    private pbc::PopsicleList<global::Critter.Messages.Data_GraphDetails> graphDetails_ = new pbc::PopsicleList<global::Critter.Messages.Data_GraphDetails>();
    public scg::IList<global::Critter.Messages.Data_GraphDetails> GraphDetailsList {
      get { return graphDetails_; }
    }
    public int GraphDetailsCount {
      get { return graphDetails_.Count; }
    }
    public global::Critter.Messages.Data_GraphDetails GetGraphDetails(int index) {
      return graphDetails_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadGraphDetailsResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (graphDetails_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], graphDetails_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        foreach (global::Critter.Messages.Data_GraphDetails element in GraphDetailsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadGraphDetails_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadGraphDetails_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadGraphDetails_Res MakeReadOnly() {
      graphDetails_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadGraphDetails_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadGraphDetails_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadGraphDetails_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadGraphDetails_Res result;
      
      private Command_LoadGraphDetails_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadGraphDetails_Res original = result;
          result = new Command_LoadGraphDetails_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadGraphDetails_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadGraphDetails_Res.Descriptor; }
      }
      
      public override Command_LoadGraphDetails_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadGraphDetails_Res.DefaultInstance; }
      }
      
      public override Command_LoadGraphDetails_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadGraphDetails_Res) {
          return MergeFrom((Command_LoadGraphDetails_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadGraphDetails_Res other) {
        if (other == global::Critter.Messages.Command_LoadGraphDetails_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.graphDetails_.Count != 0) {
          result.graphDetails_.Add(other.graphDetails_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadGraphDetailsResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadGraphDetailsResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.graphDetails_, global::Critter.Messages.Data_GraphDetails.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_GraphDetails> GraphDetailsList {
        get { return PrepareBuilder().graphDetails_; }
      }
      public int GraphDetailsCount {
        get { return result.GraphDetailsCount; }
      }
      public global::Critter.Messages.Data_GraphDetails GetGraphDetails(int index) {
        return result.GetGraphDetails(index);
      }
      public Builder SetGraphDetails(int index, global::Critter.Messages.Data_GraphDetails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.graphDetails_[index] = value;
        return this;
      }
      public Builder SetGraphDetails(int index, global::Critter.Messages.Data_GraphDetails.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.graphDetails_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGraphDetails(global::Critter.Messages.Data_GraphDetails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.graphDetails_.Add(value);
        return this;
      }
      public Builder AddGraphDetails(global::Critter.Messages.Data_GraphDetails.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.graphDetails_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGraphDetails(scg::IEnumerable<global::Critter.Messages.Data_GraphDetails> values) {
        PrepareBuilder();
        result.graphDetails_.Add(values);
        return this;
      }
      public Builder ClearGraphDetails() {
        PrepareBuilder();
        result.graphDetails_.Clear();
        return this;
      }
    }
    static Command_LoadGraphDetails_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadWorkDetails_Req : pb::GeneratedMessage<Command_LoadWorkDetails_Req, Command_LoadWorkDetails_Req.Builder> {
    private Command_LoadWorkDetails_Req() { }
    private static readonly Command_LoadWorkDetails_Req defaultInstance = new Command_LoadWorkDetails_Req().MakeReadOnly();
    private static readonly string[] _commandLoadWorkDetailsReqFieldNames = new string[] { "critthash", "hardTimeout", "messageName", "softTimeout" };
    private static readonly uint[] _commandLoadWorkDetailsReqFieldTags = new uint[] { 34, 24, 10, 16 };
    public static Command_LoadWorkDetails_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadWorkDetails_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadWorkDetails_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadWorkDetails_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadWorkDetails_Req, Command_LoadWorkDetails_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadWorkDetails_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public const int CritthashFieldNumber = 4;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadWorkDetailsReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[3], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[1], HardTimeout);
      }
      if (hasCritthash) {
        output.WriteString(4, field_names[0], Critthash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Critthash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadWorkDetails_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadWorkDetails_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadWorkDetails_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadWorkDetails_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadWorkDetails_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadWorkDetails_Req result;
      
      private Command_LoadWorkDetails_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadWorkDetails_Req original = result;
          result = new Command_LoadWorkDetails_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadWorkDetails_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadWorkDetails_Req.Descriptor; }
      }
      
      public override Command_LoadWorkDetails_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadWorkDetails_Req.DefaultInstance; }
      }
      
      public override Command_LoadWorkDetails_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadWorkDetails_Req) {
          return MergeFrom((Command_LoadWorkDetails_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadWorkDetails_Req other) {
        if (other == global::Critter.Messages.Command_LoadWorkDetails_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadWorkDetailsReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadWorkDetailsReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
            case 34: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
    }
    static Command_LoadWorkDetails_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_LoadWorkDetails_Res : pb::GeneratedMessage<Command_LoadWorkDetails_Res, Command_LoadWorkDetails_Res.Builder> {
    private Command_LoadWorkDetails_Res() { }
    private static readonly Command_LoadWorkDetails_Res defaultInstance = new Command_LoadWorkDetails_Res().MakeReadOnly();
    private static readonly string[] _commandLoadWorkDetailsResFieldNames = new string[] { "critthash", "messageName", "workDetails" };
    private static readonly uint[] _commandLoadWorkDetailsResFieldTags = new uint[] { 18, 10, 26 };
    public static Command_LoadWorkDetails_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_LoadWorkDetails_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_LoadWorkDetails_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadWorkDetails_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_LoadWorkDetails_Res, Command_LoadWorkDetails_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_LoadWorkDetails_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int WorkDetailsFieldNumber = 3;
    private pbc::PopsicleList<global::Critter.Messages.Data_WorkDetails> workDetails_ = new pbc::PopsicleList<global::Critter.Messages.Data_WorkDetails>();
    public scg::IList<global::Critter.Messages.Data_WorkDetails> WorkDetailsList {
      get { return workDetails_; }
    }
    public int WorkDetailsCount {
      get { return workDetails_.Count; }
    }
    public global::Critter.Messages.Data_WorkDetails GetWorkDetails(int index) {
      return workDetails_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandLoadWorkDetailsResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[1], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (workDetails_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], workDetails_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        foreach (global::Critter.Messages.Data_WorkDetails element in WorkDetailsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_LoadWorkDetails_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_LoadWorkDetails_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_LoadWorkDetails_Res MakeReadOnly() {
      workDetails_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_LoadWorkDetails_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_LoadWorkDetails_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_LoadWorkDetails_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_LoadWorkDetails_Res result;
      
      private Command_LoadWorkDetails_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_LoadWorkDetails_Res original = result;
          result = new Command_LoadWorkDetails_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_LoadWorkDetails_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_LoadWorkDetails_Res.Descriptor; }
      }
      
      public override Command_LoadWorkDetails_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_LoadWorkDetails_Res.DefaultInstance; }
      }
      
      public override Command_LoadWorkDetails_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_LoadWorkDetails_Res) {
          return MergeFrom((Command_LoadWorkDetails_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_LoadWorkDetails_Res other) {
        if (other == global::Critter.Messages.Command_LoadWorkDetails_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.workDetails_.Count != 0) {
          result.workDetails_.Add(other.workDetails_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandLoadWorkDetailsResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandLoadWorkDetailsResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.workDetails_, global::Critter.Messages.Data_WorkDetails.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_WorkDetails> WorkDetailsList {
        get { return PrepareBuilder().workDetails_; }
      }
      public int WorkDetailsCount {
        get { return result.WorkDetailsCount; }
      }
      public global::Critter.Messages.Data_WorkDetails GetWorkDetails(int index) {
        return result.GetWorkDetails(index);
      }
      public Builder SetWorkDetails(int index, global::Critter.Messages.Data_WorkDetails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.workDetails_[index] = value;
        return this;
      }
      public Builder SetWorkDetails(int index, global::Critter.Messages.Data_WorkDetails.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.workDetails_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorkDetails(global::Critter.Messages.Data_WorkDetails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.workDetails_.Add(value);
        return this;
      }
      public Builder AddWorkDetails(global::Critter.Messages.Data_WorkDetails.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.workDetails_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorkDetails(scg::IEnumerable<global::Critter.Messages.Data_WorkDetails> values) {
        PrepareBuilder();
        result.workDetails_.Add(values);
        return this;
      }
      public Builder ClearWorkDetails() {
        PrepareBuilder();
        result.workDetails_.Clear();
        return this;
      }
    }
    static Command_LoadWorkDetails_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data_Rite : pb::GeneratedMessage<Data_Rite, Data_Rite.Builder> {
    private Data_Rite() { }
    private static readonly Data_Rite defaultInstance = new Data_Rite().MakeReadOnly();
    private static readonly string[] _dataRiteFieldNames = new string[] { "riteName" };
    private static readonly uint[] _dataRiteFieldTags = new uint[] { 10 };
    public static Data_Rite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data_Rite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data_Rite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Data_Rite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data_Rite, Data_Rite.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Data_Rite__FieldAccessorTable; }
    }
    
    public const int RiteNameFieldNumber = 1;
    private bool hasRiteName;
    private string riteName_ = "";
    public bool HasRiteName {
      get { return hasRiteName; }
    }
    public string RiteName {
      get { return riteName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataRiteFieldNames;
      if (hasRiteName) {
        output.WriteString(1, field_names[0], RiteName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRiteName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RiteName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data_Rite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Rite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Rite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data_Rite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data_Rite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Rite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data_Rite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data_Rite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data_Rite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data_Rite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data_Rite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data_Rite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data_Rite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data_Rite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data_Rite result;
      
      private Data_Rite PrepareBuilder() {
        if (resultIsReadOnly) {
          Data_Rite original = result;
          result = new Data_Rite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data_Rite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Data_Rite.Descriptor; }
      }
      
      public override Data_Rite DefaultInstanceForType {
        get { return global::Critter.Messages.Data_Rite.DefaultInstance; }
      }
      
      public override Data_Rite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data_Rite) {
          return MergeFrom((Data_Rite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data_Rite other) {
        if (other == global::Critter.Messages.Data_Rite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRiteName) {
          RiteName = other.RiteName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataRiteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataRiteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRiteName = input.ReadString(ref result.riteName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRiteName {
        get { return result.hasRiteName; }
      }
      public string RiteName {
        get { return result.RiteName; }
        set { SetRiteName(value); }
      }
      public Builder SetRiteName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRiteName = true;
        result.riteName_ = value;
        return this;
      }
      public Builder ClearRiteName() {
        PrepareBuilder();
        result.hasRiteName = false;
        result.riteName_ = "";
        return this;
      }
    }
    static Data_Rite() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Announcement_Heartbeat : pb::GeneratedMessage<Announcement_Heartbeat, Announcement_Heartbeat.Builder> {
    private Announcement_Heartbeat() { }
    private static readonly Announcement_Heartbeat defaultInstance = new Announcement_Heartbeat().MakeReadOnly();
    private static readonly string[] _announcementHeartbeatFieldNames = new string[] { "crittnick", "messageName", "timestamp" };
    private static readonly uint[] _announcementHeartbeatFieldTags = new uint[] { 18, 10, 25 };
    public static Announcement_Heartbeat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Announcement_Heartbeat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Announcement_Heartbeat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Announcement_Heartbeat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Announcement_Heartbeat, Announcement_Heartbeat.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Announcement_Heartbeat__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CrittnickFieldNumber = 2;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private double timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public double Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _announcementHeartbeatFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[1], MessageName);
      }
      if (hasCrittnick) {
        output.WriteString(2, field_names[0], Crittnick);
      }
      if (hasTimestamp) {
        output.WriteDouble(3, field_names[2], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Crittnick);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Announcement_Heartbeat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Announcement_Heartbeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Announcement_Heartbeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Announcement_Heartbeat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Announcement_Heartbeat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Announcement_Heartbeat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Announcement_Heartbeat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Announcement_Heartbeat result;
      
      private Announcement_Heartbeat PrepareBuilder() {
        if (resultIsReadOnly) {
          Announcement_Heartbeat original = result;
          result = new Announcement_Heartbeat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Announcement_Heartbeat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Announcement_Heartbeat.Descriptor; }
      }
      
      public override Announcement_Heartbeat DefaultInstanceForType {
        get { return global::Critter.Messages.Announcement_Heartbeat.DefaultInstance; }
      }
      
      public override Announcement_Heartbeat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Announcement_Heartbeat) {
          return MergeFrom((Announcement_Heartbeat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Announcement_Heartbeat other) {
        if (other == global::Critter.Messages.Announcement_Heartbeat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_announcementHeartbeatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _announcementHeartbeatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
            case 25: {
              result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public double Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(double value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0D;
        return this;
      }
    }
    static Announcement_Heartbeat() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_PresentYourself_Req : pb::GeneratedMessage<Command_PresentYourself_Req, Command_PresentYourself_Req.Builder> {
    private Command_PresentYourself_Req() { }
    private static readonly Command_PresentYourself_Req defaultInstance = new Command_PresentYourself_Req().MakeReadOnly();
    private static readonly string[] _commandPresentYourselfReqFieldNames = new string[] { "critthash", "crittnick", "hardTimeout", "messageName", "softTimeout" };
    private static readonly uint[] _commandPresentYourselfReqFieldTags = new uint[] { 34, 42, 24, 10, 16 };
    public static Command_PresentYourself_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_PresentYourself_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_PresentYourself_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_PresentYourself_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_PresentYourself_Req, Command_PresentYourself_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_PresentYourself_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int SoftTimeoutFieldNumber = 2;
    private bool hasSoftTimeout;
    private uint softTimeout_;
    public bool HasSoftTimeout {
      get { return hasSoftTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint SoftTimeout {
      get { return softTimeout_; }
    }
    
    public const int HardTimeoutFieldNumber = 3;
    private bool hasHardTimeout;
    private uint hardTimeout_;
    public bool HasHardTimeout {
      get { return hasHardTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardTimeout {
      get { return hardTimeout_; }
    }
    
    public const int CritthashFieldNumber = 4;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int CrittnickFieldNumber = 5;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandPresentYourselfReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[3], MessageName);
      }
      if (hasSoftTimeout) {
        output.WriteUInt32(2, field_names[4], SoftTimeout);
      }
      if (hasHardTimeout) {
        output.WriteUInt32(3, field_names[2], HardTimeout);
      }
      if (hasCritthash) {
        output.WriteString(4, field_names[0], Critthash);
      }
      if (hasCrittnick) {
        output.WriteString(5, field_names[1], Crittnick);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasSoftTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SoftTimeout);
        }
        if (hasHardTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HardTimeout);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Critthash);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Crittnick);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_PresentYourself_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_PresentYourself_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_PresentYourself_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_PresentYourself_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_PresentYourself_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_PresentYourself_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_PresentYourself_Req result;
      
      private Command_PresentYourself_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_PresentYourself_Req original = result;
          result = new Command_PresentYourself_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_PresentYourself_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_PresentYourself_Req.Descriptor; }
      }
      
      public override Command_PresentYourself_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_PresentYourself_Req.DefaultInstance; }
      }
      
      public override Command_PresentYourself_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_PresentYourself_Req) {
          return MergeFrom((Command_PresentYourself_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_PresentYourself_Req other) {
        if (other == global::Critter.Messages.Command_PresentYourself_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasSoftTimeout) {
          SoftTimeout = other.SoftTimeout;
        }
        if (other.HasHardTimeout) {
          HardTimeout = other.HardTimeout;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandPresentYourselfReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandPresentYourselfReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasSoftTimeout = input.ReadUInt32(ref result.softTimeout_);
              break;
            }
            case 24: {
              result.hasHardTimeout = input.ReadUInt32(ref result.hardTimeout_);
              break;
            }
            case 34: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 42: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasSoftTimeout {
        get { return result.hasSoftTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint SoftTimeout {
        get { return result.SoftTimeout; }
        set { SetSoftTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSoftTimeout(uint value) {
        PrepareBuilder();
        result.hasSoftTimeout = true;
        result.softTimeout_ = value;
        return this;
      }
      public Builder ClearSoftTimeout() {
        PrepareBuilder();
        result.hasSoftTimeout = false;
        result.softTimeout_ = 0;
        return this;
      }
      
      public bool HasHardTimeout {
        get { return result.hasHardTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardTimeout {
        get { return result.HardTimeout; }
        set { SetHardTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardTimeout(uint value) {
        PrepareBuilder();
        result.hasHardTimeout = true;
        result.hardTimeout_ = value;
        return this;
      }
      public Builder ClearHardTimeout() {
        PrepareBuilder();
        result.hasHardTimeout = false;
        result.hardTimeout_ = 0;
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
    }
    static Command_PresentYourself_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_PresentYourself_Res : pb::GeneratedMessage<Command_PresentYourself_Res, Command_PresentYourself_Res.Builder> {
    private Command_PresentYourself_Res() { }
    private static readonly Command_PresentYourself_Res defaultInstance = new Command_PresentYourself_Res().MakeReadOnly();
    private static readonly string[] _commandPresentYourselfResFieldNames = new string[] { "critthash", "crittnick", "messageName", "rites" };
    private static readonly uint[] _commandPresentYourselfResFieldTags = new uint[] { 18, 26, 10, 34 };
    public static Command_PresentYourself_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_PresentYourself_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_PresentYourself_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_PresentYourself_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_PresentYourself_Res, Command_PresentYourself_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_PresentYourself_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int CrittnickFieldNumber = 3;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public const int RitesFieldNumber = 4;
    private pbc::PopsicleList<global::Critter.Messages.Data_Rite> rites_ = new pbc::PopsicleList<global::Critter.Messages.Data_Rite>();
    public scg::IList<global::Critter.Messages.Data_Rite> RitesList {
      get { return rites_; }
    }
    public int RitesCount {
      get { return rites_.Count; }
    }
    public global::Critter.Messages.Data_Rite GetRites(int index) {
      return rites_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandPresentYourselfResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (hasCrittnick) {
        output.WriteString(3, field_names[1], Crittnick);
      }
      if (rites_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], rites_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Crittnick);
        }
        foreach (global::Critter.Messages.Data_Rite element in RitesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_PresentYourself_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_PresentYourself_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_PresentYourself_Res MakeReadOnly() {
      rites_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_PresentYourself_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_PresentYourself_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_PresentYourself_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_PresentYourself_Res result;
      
      private Command_PresentYourself_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_PresentYourself_Res original = result;
          result = new Command_PresentYourself_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_PresentYourself_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_PresentYourself_Res.Descriptor; }
      }
      
      public override Command_PresentYourself_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_PresentYourself_Res.DefaultInstance; }
      }
      
      public override Command_PresentYourself_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_PresentYourself_Res) {
          return MergeFrom((Command_PresentYourself_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_PresentYourself_Res other) {
        if (other == global::Critter.Messages.Command_PresentYourself_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        if (other.rites_.Count != 0) {
          result.rites_.Add(other.rites_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandPresentYourselfResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandPresentYourselfResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.rites_, global::Critter.Messages.Data_Rite.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Critter.Messages.Data_Rite> RitesList {
        get { return PrepareBuilder().rites_; }
      }
      public int RitesCount {
        get { return result.RitesCount; }
      }
      public global::Critter.Messages.Data_Rite GetRites(int index) {
        return result.GetRites(index);
      }
      public Builder SetRites(int index, global::Critter.Messages.Data_Rite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rites_[index] = value;
        return this;
      }
      public Builder SetRites(int index, global::Critter.Messages.Data_Rite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rites_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRites(global::Critter.Messages.Data_Rite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rites_.Add(value);
        return this;
      }
      public Builder AddRites(global::Critter.Messages.Data_Rite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rites_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRites(scg::IEnumerable<global::Critter.Messages.Data_Rite> values) {
        PrepareBuilder();
        result.rites_.Add(values);
        return this;
      }
      public Builder ClearRites() {
        PrepareBuilder();
        result.rites_.Clear();
        return this;
      }
    }
    static Command_PresentYourself_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Announcement_Poke : pb::GeneratedMessage<Announcement_Poke, Announcement_Poke.Builder> {
    private Announcement_Poke() { }
    private static readonly Announcement_Poke defaultInstance = new Announcement_Poke().MakeReadOnly();
    private static readonly string[] _announcementPokeFieldNames = new string[] { "crittnick", "messageName" };
    private static readonly uint[] _announcementPokeFieldTags = new uint[] { 18, 10 };
    public static Announcement_Poke DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Announcement_Poke DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Announcement_Poke ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Announcement_Poke__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Announcement_Poke, Announcement_Poke.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Announcement_Poke__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CrittnickFieldNumber = 2;
    private bool hasCrittnick;
    private string crittnick_ = "";
    public bool HasCrittnick {
      get { return hasCrittnick; }
    }
    public string Crittnick {
      get { return crittnick_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _announcementPokeFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[1], MessageName);
      }
      if (hasCrittnick) {
        output.WriteString(2, field_names[0], Crittnick);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCrittnick) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Crittnick);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Announcement_Poke ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Announcement_Poke ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Announcement_Poke ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Announcement_Poke ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Announcement_Poke MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Announcement_Poke prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Announcement_Poke, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Announcement_Poke cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Announcement_Poke result;
      
      private Announcement_Poke PrepareBuilder() {
        if (resultIsReadOnly) {
          Announcement_Poke original = result;
          result = new Announcement_Poke();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Announcement_Poke MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Announcement_Poke.Descriptor; }
      }
      
      public override Announcement_Poke DefaultInstanceForType {
        get { return global::Critter.Messages.Announcement_Poke.DefaultInstance; }
      }
      
      public override Announcement_Poke BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Announcement_Poke) {
          return MergeFrom((Announcement_Poke) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Announcement_Poke other) {
        if (other == global::Critter.Messages.Announcement_Poke.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCrittnick) {
          Crittnick = other.Crittnick;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_announcementPokeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _announcementPokeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCrittnick = input.ReadString(ref result.crittnick_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCrittnick {
        get { return result.hasCrittnick; }
      }
      public string Crittnick {
        get { return result.Crittnick; }
        set { SetCrittnick(value); }
      }
      public Builder SetCrittnick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrittnick = true;
        result.crittnick_ = value;
        return this;
      }
      public Builder ClearCrittnick() {
        PrepareBuilder();
        result.hasCrittnick = false;
        result.crittnick_ = "";
        return this;
      }
    }
    static Announcement_Poke() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DescribeCrittwork_Req : pb::GeneratedMessage<Command_DescribeCrittwork_Req, Command_DescribeCrittwork_Req.Builder> {
    private Command_DescribeCrittwork_Req() { }
    private static readonly Command_DescribeCrittwork_Req defaultInstance = new Command_DescribeCrittwork_Req().MakeReadOnly();
    private static readonly string[] _commandDescribeCrittworkReqFieldNames = new string[] { "critthash", "messageName" };
    private static readonly uint[] _commandDescribeCrittworkReqFieldTags = new uint[] { 18, 10 };
    public static Command_DescribeCrittwork_Req DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DescribeCrittwork_Req DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DescribeCrittwork_Req ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DescribeCrittwork_Req__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DescribeCrittwork_Req, Command_DescribeCrittwork_Req.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DescribeCrittwork_Req__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDescribeCrittworkReqFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[1], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DescribeCrittwork_Req ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Req ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DescribeCrittwork_Req MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DescribeCrittwork_Req prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DescribeCrittwork_Req, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DescribeCrittwork_Req cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DescribeCrittwork_Req result;
      
      private Command_DescribeCrittwork_Req PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DescribeCrittwork_Req original = result;
          result = new Command_DescribeCrittwork_Req();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DescribeCrittwork_Req MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DescribeCrittwork_Req.Descriptor; }
      }
      
      public override Command_DescribeCrittwork_Req DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DescribeCrittwork_Req.DefaultInstance; }
      }
      
      public override Command_DescribeCrittwork_Req BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DescribeCrittwork_Req) {
          return MergeFrom((Command_DescribeCrittwork_Req) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DescribeCrittwork_Req other) {
        if (other == global::Critter.Messages.Command_DescribeCrittwork_Req.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDescribeCrittworkReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDescribeCrittworkReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
    }
    static Command_DescribeCrittwork_Req() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command_DescribeCrittwork_Res : pb::GeneratedMessage<Command_DescribeCrittwork_Res, Command_DescribeCrittwork_Res.Builder> {
    private Command_DescribeCrittwork_Res() { }
    private static readonly Command_DescribeCrittwork_Res defaultInstance = new Command_DescribeCrittwork_Res().MakeReadOnly();
    private static readonly string[] _commandDescribeCrittworkResFieldNames = new string[] { "critthash", "dummy", "messageName" };
    private static readonly uint[] _commandDescribeCrittworkResFieldTags = new uint[] { 18, 26, 10 };
    public static Command_DescribeCrittwork_Res DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command_DescribeCrittwork_Res DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command_DescribeCrittwork_Res ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Critter.Messages.Messages.internal__static_Command_DescribeCrittwork_Res__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command_DescribeCrittwork_Res, Command_DescribeCrittwork_Res.Builder> InternalFieldAccessors {
      get { return global::Critter.Messages.Messages.internal__static_Command_DescribeCrittwork_Res__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int CritthashFieldNumber = 2;
    private bool hasCritthash;
    private string critthash_ = "";
    public bool HasCritthash {
      get { return hasCritthash; }
    }
    public string Critthash {
      get { return critthash_; }
    }
    
    public const int DummyFieldNumber = 3;
    private bool hasDummy;
    private string dummy_ = "";
    public bool HasDummy {
      get { return hasDummy; }
    }
    public string Dummy {
      get { return dummy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandDescribeCrittworkResFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[2], MessageName);
      }
      if (hasCritthash) {
        output.WriteString(2, field_names[0], Critthash);
      }
      if (hasDummy) {
        output.WriteString(3, field_names[1], Dummy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
        }
        if (hasCritthash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Critthash);
        }
        if (hasDummy) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Dummy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command_DescribeCrittwork_Res ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command_DescribeCrittwork_Res ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command_DescribeCrittwork_Res MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command_DescribeCrittwork_Res prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command_DescribeCrittwork_Res, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command_DescribeCrittwork_Res cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command_DescribeCrittwork_Res result;
      
      private Command_DescribeCrittwork_Res PrepareBuilder() {
        if (resultIsReadOnly) {
          Command_DescribeCrittwork_Res original = result;
          result = new Command_DescribeCrittwork_Res();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command_DescribeCrittwork_Res MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Critter.Messages.Command_DescribeCrittwork_Res.Descriptor; }
      }
      
      public override Command_DescribeCrittwork_Res DefaultInstanceForType {
        get { return global::Critter.Messages.Command_DescribeCrittwork_Res.DefaultInstance; }
      }
      
      public override Command_DescribeCrittwork_Res BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command_DescribeCrittwork_Res) {
          return MergeFrom((Command_DescribeCrittwork_Res) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command_DescribeCrittwork_Res other) {
        if (other == global::Critter.Messages.Command_DescribeCrittwork_Res.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasCritthash) {
          Critthash = other.Critthash;
        }
        if (other.HasDummy) {
          Dummy = other.Dummy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandDescribeCrittworkResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandDescribeCrittworkResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 18: {
              result.hasCritthash = input.ReadString(ref result.critthash_);
              break;
            }
            case 26: {
              result.hasDummy = input.ReadString(ref result.dummy_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasCritthash {
        get { return result.hasCritthash; }
      }
      public string Critthash {
        get { return result.Critthash; }
        set { SetCritthash(value); }
      }
      public Builder SetCritthash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCritthash = true;
        result.critthash_ = value;
        return this;
      }
      public Builder ClearCritthash() {
        PrepareBuilder();
        result.hasCritthash = false;
        result.critthash_ = "";
        return this;
      }
      
      public bool HasDummy {
        get { return result.hasDummy; }
      }
      public string Dummy {
        get { return result.Dummy; }
        set { SetDummy(value); }
      }
      public Builder SetDummy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDummy = true;
        result.dummy_ = value;
        return this;
      }
      public Builder ClearDummy() {
        PrepareBuilder();
        result.hasDummy = false;
        result.dummy_ = "";
        return this;
      }
    }
    static Command_DescribeCrittwork_Res() {
      object.ReferenceEquals(global::Critter.Messages.Messages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
